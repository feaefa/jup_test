import { Market } from '@project-serum/serum';
import { PublicKey, TransactionInstruction } from '@solana/web3.js';
import type { RaydiumAmm } from './raydium/raydiumAmm';
import { StableSwap } from '@saberhq/stableswap-sdk';
import { AldrinPoolState } from './aldrin/poolState';
import type { TokenSwapState } from './spl-token-swap/tokenSwapLayout';
import { PlatformFee } from './types';
import type { AddDecimals } from './saber/saberAddDecimalsAmm';
import { CropperPoolState } from './cropper/swapLayout';
import { SenchaPoolState } from './sencha/swapLayout';
import { MercurialSwapLayoutState } from './mercurial/swapLayout';
export declare const JUPITER_PROGRAM_ID_STAGING: PublicKey;
export declare const JUPITER_PROGRAM_ID_PRODUCTION: PublicKey;
export declare function createMercurialExchangeInstruction(swapLayout: MercurialSwapLayoutState, userSourceTokenAccountAddress: PublicKey, userDestinationTokenAccountAddress: PublicKey, user: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined): TransactionInstruction;
export declare function createSerumSwapInstruction(market: Market, inputMint: PublicKey, openOrdersAddress: PublicKey, userSourceTokenAccountAddress: PublicKey, userDestinationTokenAccountAddress: PublicKey, user: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined, referrer: PublicKey | undefined): TransactionInstruction;
export declare function createTokenSwapInstruction(tokenSwapState: TokenSwapState, inputMint: PublicKey, userSourceTokenAccountAddress: PublicKey, userDestinationTokenAccountAddress: PublicKey, user: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined, isStep: boolean): TransactionInstruction;
export declare function createSenchaSwapInstruction(poolState: SenchaPoolState, sourceMint: PublicKey, userSourceTokenAccountAddress: PublicKey, userDestinationTokenAccountAddress: PublicKey, user: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined): TransactionInstruction;
export declare function createCropperSwapInstruction(poolState: CropperPoolState, sourceMint: PublicKey, userSourceTokenAccountAddress: PublicKey, userDestinationTokenAccountAddress: PublicKey, user: PublicKey, feeAccount: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined): TransactionInstruction;
export declare function createRaydiumSwapInstruction(raydiumAmm: RaydiumAmm, userSourceTokenAccountAddress: PublicKey, userDestinationTokenAccountAddress: PublicKey, user: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined): TransactionInstruction;
export declare function createAldrinSwapInstruction(poolState: AldrinPoolState, sourceMint: PublicKey, userSourceTokenAccountAddress: PublicKey, userDestinationTokenAccountAddress: PublicKey, user: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined): TransactionInstruction;
export declare function createAldrinV2SwapInstruction(poolState: AldrinPoolState, sourceMint: PublicKey, userSourceTokenAccountAddress: PublicKey, userDestinationTokenAccountAddress: PublicKey, curve: PublicKey, user: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined): TransactionInstruction;
export declare function createRiskCheckAndFeeInstruction(userDestinationTokenAccount: PublicKey, userTransferAuthority: PublicKey, minimumOutAmount: number, platformFee: PlatformFee | undefined): TransactionInstruction;
export declare function createSetTokenLedgerInstruction(tokenAccountAddress: PublicKey): TransactionInstruction;
export declare function createCreateTokenLedgerInstruction(user: PublicKey): TransactionInstruction;
export declare function createOpenOrdersInstruction(market: Market, user: PublicKey): [PublicKey, TransactionInstruction];
export declare function createSaberExchangeInstruction(saberPool: StableSwap, inputMint: PublicKey, userSourceTokenAccountAddress: PublicKey, userDestinationTokenAccountAddress: PublicKey, user: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined): TransactionInstruction;
export declare function createSaberAddDecimalsDepositInstruction(addDecimals: AddDecimals, sourceTokenAccountAddress: PublicKey, destinationTokenAccountAddress: PublicKey, userTransferAuthority: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined): TransactionInstruction;
export declare function createSaberAddDecimalsWithdrawInstruction(addDecimals: AddDecimals, sourceTokenAccountAddress: PublicKey, destinationTokenAccountAddress: PublicKey, userTransferAuthority: PublicKey, amount: number | null, minimumOutAmount: number, platformFee: PlatformFee | undefined): TransactionInstruction;
