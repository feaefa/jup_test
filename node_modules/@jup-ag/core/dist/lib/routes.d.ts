import { Cluster, Connection, PublicKey } from '@solana/web3.js';
import { MarketInfo } from './market';
import { MarketMeta, TokenRouteSegments } from './types';
import { Amm } from './amm';
export interface TransactionFeeInfo {
    signatureFee: number;
    openOrdersDeposits: number[];
    ataDeposit: number;
    ataDepositLength: number;
}
export interface RouteInfo {
    marketInfos: MarketInfo[];
    inAmount: number;
    outAmount: number;
    outAmountWithSlippage: number;
    priceImpactPct: number;
    getDepositAndFee: () => Promise<TransactionFeeInfo | undefined>;
}
export declare function getAllAmms(connection: Connection, cluster: Cluster, marketUrl?: string): Promise<Amm[]>;
export declare function getTokenRouteSegments(amms: Amm[]): TokenRouteSegments;
export declare type Route = {
    marketMetas: MarketMeta[];
    intermediateMint?: PublicKey;
};
export declare function computeRoutes(inputMint: PublicKey, outputMint: PublicKey, tokenRouteSegments: TokenRouteSegments): Route[];
export declare function computeRouteMap(tokenRouteSegments: TokenRouteSegments): Map<string, string[]>;
export declare function isSplitSetupRequired(marketInfos: MarketInfo[]): boolean;
export declare function getNumberOfTransactionForRoute(marketInfos: MarketInfo[]): number;
export declare function isPlatformFeeSupported(marketInfos: MarketMeta[]): boolean;
export declare function getRouteInfoUniqueId(routeInfo: RouteInfo): string;
