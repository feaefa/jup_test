{"version":3,"file":"core.cjs.development.js","sources":["../src/lib/idl/jupiter.ts","../src/constants.ts","../src/utils/layout.ts","../src/lib/cropper/swapLayout.ts","../src/lib/jupiterInstruction.ts","../src/lib/saber/saberAddDecimalsAmm.ts","../src/utils/getTwoPermutations.ts","../src/lib/amm.ts","../src/lib/raydium/pools.ts","../src/lib/raydium/raydiumAmm.ts","../src/lib/serum/market.ts","../src/lib/serum/serumAmm.ts","../src/lib/split-trade/splitTradeAmm.ts","../src/lib/market.ts","../src/utils/deserializeAccount.ts","../src/lib/saber/saberAmm.ts","../src/lib/aldrin/percentage.ts","../src/lib/aldrin/poolState.ts","../src/lib/aldrin/aldrinAmm.ts","../src/lib/spl-token-swap/splTokenSwapPools.ts","../src/lib/spl-token-swap/tokenSwapLayout.ts","../src/lib/spl-token-swap/splTokenSwapAmm.ts","../src/lib/mercurial/swapLayout.ts","../src/lib/mercurial/mercurialAmm.ts","../src/lib/cropper/cropperAmm.ts","../src/lib/sencha/swapLayout.ts","../src/lib/sencha/senchaAmm.ts","../src/lib/ammFactory.ts","../src/lib/routes.ts","../src/lib/cache.ts","../src/utils/instruction.ts","../src/utils/token.ts","../src/lib/routeToInstructions.ts","../src/lib/serum/openOrders.ts","../src/lib/fee.ts","../src/utils/TransactionBuilder.ts","../src/utils/Owner.ts","../src/lib/error.ts","../src/utils/transactionHelpers.ts","../src/utils/chunks.ts","../src/utils/chunkedGetMultipleAccountInfos.ts","../src/lib/computeRouteInfos.ts","../src/lib/jupiter.ts"],"sourcesContent":["export type Jupiter = {\n  version: '0.1.0';\n  name: 'jupiter';\n  instructions: [\n    {\n      name: 'mercurialExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'clock';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsDeposit';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsWithdraw';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'senchaExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'serumSwap';\n      accounts: [\n        {\n          name: 'market';\n          accounts: [\n            {\n              name: 'market';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'openOrders';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'requestQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'eventQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'bids';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'asks';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'coinVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'pcVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'vaultSigner';\n              isMut: false;\n              isSigner: false;\n            },\n          ];\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'orderPayerTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coinWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pcWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'tokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'stepTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cropperTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammTargetOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwapV2';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinV2Swap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'curve';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'riskCheckAndFee';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'initializeTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'payer';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'setTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAccount';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'createOpenOrders';\n      accounts: [\n        {\n          name: 'openOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'market';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n  ];\n  accounts: [\n    {\n      name: 'tokenLedger';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokenAccount';\n            type: 'publicKey';\n          },\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Deposit';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Withdraw';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'maxBurnAmount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Direction';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'LeftToRight';\n          },\n          {\n            name: 'RightToLeft';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Side';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Bid';\n          },\n          {\n            name: 'Ask';\n          },\n        ];\n      };\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: 'SlippageToleranceExceeded';\n      msg: 'Slippage tolerance exceeded';\n    },\n    {\n      code: 6001;\n      name: 'InvalidTokenLedger';\n      msg: 'Invalid token ledger';\n    },\n    {\n      code: 6002;\n      name: 'MissingTokenLedger';\n      msg: 'Missing token ledger';\n    },\n    {\n      code: 6003;\n      name: 'MissingMercurialExchangeTokenAccount';\n      msg: 'Missing mercurial exchange token account';\n    },\n    {\n      code: 6004;\n      name: 'LedgerTokenAccountDoesNotMatch';\n      msg: 'Ledger token account does not match';\n    },\n    {\n      code: 6005;\n      name: 'MissingPlatformFeeAccount';\n      msg: 'Missing platform fee account';\n    },\n    {\n      code: 6006;\n      name: 'InvalidCalculation';\n      msg: 'Invalid calculation';\n    },\n  ];\n};\n\nexport const IDL: Jupiter = {\n  version: '0.1.0',\n  name: 'jupiter',\n  instructions: [\n    {\n      name: 'mercurialExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsDeposit',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsWithdraw',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'senchaExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'serumSwap',\n      accounts: [\n        {\n          name: 'market',\n          accounts: [\n            {\n              name: 'market',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'openOrders',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'requestQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'eventQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'bids',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'asks',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'coinVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'pcVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultSigner',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'orderPayerTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coinWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pcWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'tokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'stepTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cropperTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammTargetOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwapV2',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinV2Swap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'curve',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'riskCheckAndFee',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'initializeTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'payer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'createOpenOrders',\n      accounts: [\n        {\n          name: 'openOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'market',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'tokenLedger',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokenAccount',\n            type: 'publicKey',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Deposit',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Withdraw',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'maxBurnAmount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Direction',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'LeftToRight',\n          },\n          {\n            name: 'RightToLeft',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Side',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Bid',\n          },\n          {\n            name: 'Ask',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'SlippageToleranceExceeded',\n      msg: 'Slippage tolerance exceeded',\n    },\n    {\n      code: 6001,\n      name: 'InvalidTokenLedger',\n      msg: 'Invalid token ledger',\n    },\n    {\n      code: 6002,\n      name: 'MissingTokenLedger',\n      msg: 'Missing token ledger',\n    },\n    {\n      code: 6003,\n      name: 'MissingMercurialExchangeTokenAccount',\n      msg: 'Missing mercurial exchange token account',\n    },\n    {\n      code: 6004,\n      name: 'LedgerTokenAccountDoesNotMatch',\n      msg: 'Ledger token account does not match',\n    },\n    {\n      code: 6005,\n      name: 'MissingPlatformFeeAccount',\n      msg: 'Missing platform fee account',\n    },\n    {\n      code: 6006,\n      name: 'InvalidCalculation',\n      msg: 'Invalid calculation',\n    },\n  ],\n};\n","import { Fraction } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport { Cluster, PublicKey } from '@solana/web3.js';\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const MAINNET_SERUM_DEX_PROGRAM = new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');\nexport const DEVNET_SERUM_DEX_PROGRAM = new PublicKey('DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY');\n\nexport const MARKETS_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/markets/cache/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/markets?v=3',\n  testnet: 'https://api.jup.ag/api/markets/cache/devnet',\n};\n\nexport const TOKEN_LIST_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/tokens/devnet',\n  testnet: 'https://api.jup.ag/api/markets/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/tokens',\n};\n\nexport const LAMPORTS_PER_SIGNATURE = 5000;\n\nexport const RAYDIUM_AMM_V4_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');\n\nexport const ALDRIN_SWAP_PROGRAM_ID = new PublicKey('AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6');\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/f93fe3f2d847d79d8ddff507d8d4f62fd803421b/src/v2.json\nexport const ALDRIN_SWAP_V2_PROGRAM_ID = new PublicKey('CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4');\n\nexport const SABER_ADD_DECIMALS_PROGRAM_ID = new PublicKey('DecZY86MU5Gj7kppfUCEmd4LbXXuyZH1yHaP2NTqdiZB');\n\nexport const CROPPER_PROGRAM_ID = new PublicKey('CTMAxxk34HjKWxQ3QLZK1HpaLXmBveao3ESePXbiyfzh');\n\nexport const SENCHA_PROGRAM_ID = new PublicKey('SCHAtsf8mbjyjiv4LkhLKutTf6JnZAbdJKFkXQNMFHZ');\n\nexport const ZERO_FRACTION = new Fraction(JSBI.BigInt(0), JSBI.BigInt(1));\n\nexport const JUPITER_WALLET = new PublicKey('BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9');\n\nexport const MERCURIAL_SWAP_PROGRAM_ID = new PublicKey('MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky');\n","import { blob, Layout, Structure, u8, union } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nclass PublicKeyLayout extends Layout<PublicKey> {\n  private layout: Layout<any>;\n\n  constructor(property?: string) {\n    const layout = blob(32);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): PublicKey {\n    return new PublicKey(this.layout.decode(b, offset));\n  }\n\n  encode(src: PublicKey, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toBuffer(), b, offset);\n  }\n}\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string) => new PublicKeyLayout(property);\n\nclass U64Layout extends Layout<u64> {\n  private layout: Layout<any>;\n\n  constructor(span = 8, property: string) {\n    const layout = blob(span);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): u64 {\n    const bn = new u64(this.layout.decode(b, offset), 10, 'le');\n\n    return bn;\n  }\n\n  encode(src: u64, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toArrayLike(Buffer, 'le', this.layout.span), b, offset);\n  }\n}\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string) => new U64Layout(8, property);\n\nexport const uint128 = (property: string) => new U64Layout(16, property);\n\nexport const rustEnum = (variants: Structure<any>[], property: string) => {\n  // @ts-expect-error TODO: fix this\n  const unionLayout = union(u8(), u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property || ''));\n  return unionLayout;\n};\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { blob, struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { publicKey, uint64 } from '../../utils/layout';\n\ninterface CropperTokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\nexport const CropperTokenSwapLayout = struct<CropperTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  publicKey('ammId'),\n  publicKey('serumProgramId'),\n  publicKey('serumMarket'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAAccount'),\n  publicKey('tokenBAccount'),\n  publicKey('poolMint'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n]);\n\ninterface CropperStateLayout {\n  isInitialized: number;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: u64;\n  fixedFeeNumerator: u64;\n  feeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst CropperStateLayout = struct<CropperStateLayout>([\n  u8('isInitialized'),\n  publicKey('stateOwner'),\n  publicKey('feeOwner'),\n  uint64('initialSupply'),\n  uint64('returnFeeNumerator'),\n  uint64('fixedFeeNumerator'),\n  uint64('feeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\nexport interface CropperState {\n  isInitialized: boolean;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nexport interface CropperPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\n// This seems to be hardcoded.\nexport const CROPPER_STATE_ADDRESS = new PublicKey('3hsU1VgsBgBgz5jWiqdw9RfGU6TpWdCmdah1oi4kF3Tq');\n\nexport const accountInfoToCropperPoolState = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): CropperPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = CropperTokenSwapLayout.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: decoded.ammId,\n    serumProgramId: decoded.serumProgramId,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.tokenAAccount,\n    tokenBAccount: decoded.tokenBAccount,\n    serumMarket: decoded.serumMarket,\n    poolMint: decoded.poolMint,\n    mintA: decoded.mintA,\n    mintB: decoded.mintB,\n  };\n};\n\nexport const stateAccountInfoToCropperState = (accountInfo: AccountInfo<Buffer>): CropperState => {\n  const decoded = CropperStateLayout.decode(accountInfo.data);\n\n  return {\n    isInitialized: Boolean(decoded.isInitialized),\n    stateOwner: decoded.stateOwner,\n    feeOwner: decoded.feeOwner,\n    initialSupply: decoded.initialSupply,\n    returnFeeNumerator: decoded.returnFeeNumerator.toNumber(),\n    fixedFeeNumerator: decoded.fixedFeeNumerator.toNumber(),\n    feeDenominator: decoded.feeDenominator.toNumber(),\n    curveType: decoded.curveType,\n    curveParameters: decoded.curveParameters,\n  };\n};\n","import type { Provider } from '@project-serum/anchor';\nimport { Program } from '@project-serum/anchor';\nimport { createProgramAddressSync, findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { Market } from '@project-serum/serum';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  AccountMeta,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { BN } from 'bn.js';\nimport { Jupiter as JupiterIDL, IDL } from './idl/jupiter';\nimport type { RaydiumAmm } from './raydium/raydiumAmm';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport {\n  ALDRIN_SWAP_PROGRAM_ID,\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  SABER_ADD_DECIMALS_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n} from '../constants';\nimport { AldrinPoolState } from './aldrin/poolState';\nimport type { TokenSwapState } from './spl-token-swap/tokenSwapLayout';\nimport { PlatformFee } from './types';\nimport type { AddDecimals } from './saber/saberAddDecimalsAmm';\nimport { CropperPoolState, CROPPER_STATE_ADDRESS } from './cropper/swapLayout';\nimport { SenchaPoolState } from './sencha/swapLayout';\nimport { MercurialSwapLayoutState } from './mercurial/swapLayout';\n\n// Side rust enum used for the program's RPC API.\nconst Side = {\n  Bid: { bid: {} },\n  Ask: { ask: {} },\n};\n\nexport const JUPITER_PROGRAM_ID_STAGING = new PublicKey(\n  '64vBwEhR447K9tJxE4bwfkpXhgYcGz78a3AATC8sPrUS', //'JUSCvTfqyK9H9yjb64AasMc6fVpK3VsE3RCBCFz9y4Z'\n);\n\nexport const JUPITER_PROGRAM_ID_PRODUCTION = new PublicKey('JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo');\n\nconst JUPITER_PROGRAM_ID = JUPITER_PROGRAM_ID_PRODUCTION; // JUPITER_PROGRAM_ID_PRODUCTION;\n\nconst JUPITER_PROGRAM = new Program<JupiterIDL>(IDL as JupiterIDL, JUPITER_PROGRAM_ID, {} as Provider);\n\nconst [TOKEN_LEDGER] = findProgramAddressSync([Buffer.from('token_ledger')], JUPITER_PROGRAM_ID);\n\nfunction stableSwapNPoolIntoMercurialExchange(\n  swayLayout: MercurialSwapLayoutState,\n  sourceTokenAccount: PublicKey,\n  destinationTokenAccount: PublicKey,\n  user: PublicKey,\n) {\n  return {\n    swapProgram: MERCURIAL_SWAP_PROGRAM_ID,\n    swapState: swayLayout.ammId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    poolAuthority: swayLayout.authority,\n    userTransferAuthority: user,\n\n    sourceTokenAccount,\n    destinationTokenAccount,\n  };\n}\n\nfunction raydiumAmmToRaydiumSwap(\n  raydiumAmm: RaydiumAmm,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  user: PublicKey,\n) {\n  const [ammAuthority] = findProgramAddressSync(\n    [new Uint8Array(Buffer.from('amm authority'.replace('\\u00A0', ' '), 'utf-8'))],\n    RAYDIUM_AMM_V4_PROGRAM_ID,\n  );\n\n  if (!raydiumAmm.serumMarketKeys) {\n    throw Error('RaydiumAmm is missing serumMarketKeys');\n  }\n\n  return {\n    swapProgram: RAYDIUM_AMM_V4_PROGRAM_ID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    ammId: raydiumAmm.ammId,\n    ammAuthority,\n    ammOpenOrders: raydiumAmm.ammOpenOrders,\n    poolCoinTokenAccount: raydiumAmm.poolCoinTokenAccount,\n    poolPcTokenAccount: raydiumAmm.poolPcTokenAccount,\n    serumProgramId: raydiumAmm.serumProgramId,\n    serumMarket: raydiumAmm.serumMarket,\n    serumBids: raydiumAmm.serumMarketKeys.serumBids,\n    serumAsks: raydiumAmm.serumMarketKeys.serumAsks,\n    serumEventQueue: raydiumAmm.serumMarketKeys.serumEventQueue,\n    serumCoinVaultAccount: raydiumAmm.serumMarketKeys.serumCoinVaultAccount,\n    serumPcVaultAccount: raydiumAmm.serumMarketKeys.serumPcVaultAccount,\n    serumVaultSigner: raydiumAmm.serumMarketKeys.serumVaultSigner,\n    userSourceTokenAccount: userSourceTokenAccountAddress,\n    userDestinationTokenAccount: userDestinationTokenAccountAddress,\n    userSourceOwner: user,\n  };\n}\n\nfunction marketIntoSerumSwap(\n  market: Market,\n  openOrdersAddress: PublicKey,\n  orderPayerTokenAccountAddress: PublicKey,\n  coinWallet: PublicKey,\n  pcWallet: PublicKey,\n  user: PublicKey,\n) {\n  const vaultSigner = createProgramAddressSync(\n    [market.address.toBuffer(), market.decoded.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n    market.programId,\n  );\n\n  return {\n    market: {\n      market: market.address,\n      openOrders: openOrdersAddress,\n      requestQueue: market.decoded.requestQueue,\n      eventQueue: market.decoded.eventQueue,\n      bids: market.bidsAddress,\n      asks: market.asksAddress,\n      coinVault: market.decoded.baseVault,\n      pcVault: market.decoded.quoteVault,\n      vaultSigner,\n    },\n    authority: user,\n    orderPayerTokenAccount: orderPayerTokenAccountAddress,\n    coinWallet,\n    pcWallet,\n    // Programs.\n    dexProgram: market.programId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    // Sysvars.\n    rent: SYSVAR_RENT_PUBKEY,\n  };\n}\n\nexport function createMercurialExchangeInstruction(\n  swapLayout: MercurialSwapLayoutState,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  user: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  for (const swapTokenAccount of swapLayout.tokenAccounts) {\n    remainingAccounts.push({\n      pubkey: swapTokenAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  remainingAccounts.push(...prepareRemainingAccounts(amount, platformFee?.feeAccount));\n\n  return JUPITER_PROGRAM.instruction.mercurialExchange(\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: stableSwapNPoolIntoMercurialExchange(\n        swapLayout,\n        userSourceTokenAccountAddress,\n        userDestinationTokenAccountAddress,\n        user,\n      ),\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createSerumSwapInstruction(\n  market: Market,\n  inputMint: PublicKey,\n  openOrdersAddress: PublicKey,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  user: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n  referrer: PublicKey | undefined,\n): TransactionInstruction {\n  const { side, coinWallet, pcWallet } = inputMint.equals(market.baseMintAddress)\n    ? {\n        side: Side.Ask,\n        coinWallet: userSourceTokenAccountAddress,\n        pcWallet: userDestinationTokenAccountAddress,\n      }\n    : {\n        side: Side.Bid,\n        coinWallet: userDestinationTokenAccountAddress,\n        pcWallet: userSourceTokenAccountAddress,\n      };\n\n  let remainingAccounts = prepareRemainingAccounts(amount, platformFee?.feeAccount);\n\n  if (referrer) {\n    remainingAccounts.push({\n      pubkey: referrer,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.serumSwap(\n    side,\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: marketIntoSerumSwap(\n        market,\n        openOrdersAddress,\n        userSourceTokenAccountAddress,\n        coinWallet,\n        pcWallet,\n        user,\n      ),\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createTokenSwapInstruction(\n  tokenSwapState: TokenSwapState,\n  inputMint: PublicKey,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  user: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n  isStep: boolean,\n): TransactionInstruction {\n  const [swapSource, swapDestination] = inputMint.equals(tokenSwapState.mintA)\n    ? [tokenSwapState.tokenAccountA, tokenSwapState.tokenAccountB]\n    : [tokenSwapState.tokenAccountB, tokenSwapState.tokenAccountA];\n\n  return (isStep ? JUPITER_PROGRAM.instruction.stepTokenSwap : JUPITER_PROGRAM.instruction.tokenSwap)(\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        tokenSwapProgram: tokenSwapState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: tokenSwapState.address,\n        authority: tokenSwapState.authority,\n        userTransferAuthority: user,\n        source: userSourceTokenAccountAddress,\n        swapSource,\n        swapDestination,\n        destination: userDestinationTokenAccountAddress,\n        poolMint: tokenSwapState.poolToken,\n        poolFee: tokenSwapState.feeAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(amount, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createSenchaSwapInstruction(\n  poolState: SenchaPoolState,\n  sourceMint: PublicKey,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  user: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Reserves, poolState.token1Reserves]\n    : [poolState.token1Reserves, poolState.token0Reserves];\n\n  const [feesSource, feesDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Fees, poolState.token1Fees]\n    : [poolState.token1Fees, poolState.token0Fees];\n\n  return JUPITER_PROGRAM.instruction.senchaExchange(\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: poolState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: poolState.ammId,\n        userAuthority: user,\n        inputUserAccount: userSourceTokenAccountAddress,\n        inputTokenAccount: swapSource,\n        inputFeesAccount: feesSource,\n        outputUserAccount: userDestinationTokenAccountAddress,\n        outputTokenAccount: swapDestination,\n        outputFeesAccount: feesDestination,\n      },\n      remainingAccounts: prepareRemainingAccounts(amount, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createCropperSwapInstruction(\n  poolState: CropperPoolState,\n  sourceMint: PublicKey,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  user: PublicKey,\n  feeAccount: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cropperTokenSwap(\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        tokenSwapProgram: poolState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: poolState.ammId,\n        swapState: CROPPER_STATE_ADDRESS,\n        authority: poolState.authority,\n        userTransferAuthority: user,\n        source: userSourceTokenAccountAddress,\n        swapSource,\n        swapDestination,\n        destination: userDestinationTokenAccountAddress,\n        poolMint: poolState.poolMint,\n        poolFee: feeAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(amount, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createRaydiumSwapInstruction(\n  raydiumAmm: RaydiumAmm,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  user: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.raydiumSwapV2(\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: raydiumAmmToRaydiumSwap(\n        raydiumAmm,\n        userSourceTokenAccountAddress,\n        userDestinationTokenAccountAddress,\n        user,\n      ),\n      remainingAccounts: prepareRemainingAccounts(amount, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createAldrinSwapInstruction(\n  poolState: AldrinPoolState,\n  sourceMint: PublicKey,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  user: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccountAddress, userDestinationTokenAccountAddress]\n    : [Side.Bid, userDestinationTokenAccountAddress, userSourceTokenAccountAddress];\n\n  return JUPITER_PROGRAM.instruction.aldrinSwap(\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    side,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: ALDRIN_SWAP_PROGRAM_ID,\n        pool: poolState.address,\n        poolSigner: poolState.poolSigner,\n        poolMint: poolState.poolMint,\n        baseTokenVault: poolState.baseTokenVault,\n        quoteTokenVault: poolState.quoteTokenVault,\n        feePoolTokenAccount: poolState.feePoolTokenAccount,\n        walletAuthority: user,\n        userBaseTokenAccount,\n        userQuoteTokenAccount,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts: prepareRemainingAccounts(amount, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createAldrinV2SwapInstruction(\n  poolState: AldrinPoolState,\n  sourceMint: PublicKey,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  curve: PublicKey,\n  user: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccountAddress, userDestinationTokenAccountAddress]\n    : [Side.Bid, userDestinationTokenAccountAddress, userSourceTokenAccountAddress];\n\n  return JUPITER_PROGRAM.instruction.aldrinV2Swap(\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    side,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: ALDRIN_SWAP_V2_PROGRAM_ID,\n        pool: poolState.address,\n        poolSigner: poolState.poolSigner,\n        poolMint: poolState.poolMint,\n        baseTokenVault: poolState.baseTokenVault,\n        quoteTokenVault: poolState.quoteTokenVault,\n        feePoolTokenAccount: poolState.feePoolTokenAccount,\n        walletAuthority: user,\n        userBaseTokenAccount,\n        userQuoteTokenAccount,\n        curve,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts: prepareRemainingAccounts(amount, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createRiskCheckAndFeeInstruction(\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  if (platformFee?.feeAccount) {\n    remainingAccounts.push({\n      pubkey: platformFee.feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.riskCheckAndFee(new BN(minimumOutAmount), platformFee?.feeBps ?? 0, {\n    accounts: {\n      tokenLedger: TOKEN_LEDGER,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createSetTokenLedgerInstruction(tokenAccountAddress: PublicKey): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.setTokenLedger({\n    accounts: {\n      tokenLedger: TOKEN_LEDGER,\n      tokenAccount: tokenAccountAddress,\n    },\n  });\n}\n\nexport function createCreateTokenLedgerInstruction(user: PublicKey): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.initializeTokenLedger({\n    accounts: {\n      tokenLedger: TOKEN_LEDGER,\n      payer: user,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n  });\n}\n\nexport function createOpenOrdersInstruction(market: Market, user: PublicKey): [PublicKey, TransactionInstruction] {\n  const [openOrders] = findProgramAddressSync(\n    [Buffer.from('open_orders'), market.publicKey.toBuffer(), user.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  );\n\n  const ix = JUPITER_PROGRAM.instruction.createOpenOrders({\n    accounts: {\n      openOrders,\n      payer: user,\n      dexProgram: market.programId,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      market: market.publicKey,\n    },\n  });\n  return [openOrders, ix];\n}\n\nfunction saberPoolIntoSaberExchange(\n  saberPool: StableSwap,\n  sourceMintAddress: PublicKey,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  user: PublicKey,\n) {\n  const feesTokenAccount = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? saberPool.state.tokenB.adminFeeAccount\n    : saberPool.state.tokenA.adminFeeAccount;\n  const [inputTokenAccount, outputTokenAccount] = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? [saberPool.state.tokenA.reserve, saberPool.state.tokenB.reserve]\n    : [saberPool.state.tokenB.reserve, saberPool.state.tokenA.reserve];\n\n  return {\n    swapProgram: saberPool.config.swapProgramID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    swap: saberPool.config.swapAccount,\n    swapAuthority: saberPool.config.authority,\n    userAuthority: user,\n    clock: SYSVAR_CLOCK_PUBKEY,\n    inputUserAccount: userSourceTokenAccountAddress,\n    inputTokenAccount,\n    outputUserAccount: userDestinationTokenAccountAddress,\n    outputTokenAccount,\n    feesTokenAccount,\n  };\n}\n\nexport function createSaberExchangeInstruction(\n  saberPool: StableSwap,\n  inputMint: PublicKey,\n  userSourceTokenAccountAddress: PublicKey,\n  userDestinationTokenAccountAddress: PublicKey,\n  user: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(amount, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberExchange(\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: saberPoolIntoSaberExchange(\n        saberPool,\n        inputMint,\n        userSourceTokenAccountAddress,\n        userDestinationTokenAccountAddress,\n        user,\n      ),\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createSaberAddDecimalsDepositInstruction(\n  addDecimals: AddDecimals,\n  sourceTokenAccountAddress: PublicKey,\n  destinationTokenAccountAddress: PublicKey,\n  userTransferAuthority: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n) {\n  const remainingAccounts = prepareRemainingAccounts(amount, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsDeposit(\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n        wrapper: addDecimals.wrapper,\n        wrapperMint: addDecimals.mint,\n        wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n        owner: userTransferAuthority,\n        userUnderlyingTokens: sourceTokenAccountAddress,\n        userWrappedTokens: destinationTokenAccountAddress,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createSaberAddDecimalsWithdrawInstruction(\n  addDecimals: AddDecimals,\n  sourceTokenAccountAddress: PublicKey,\n  destinationTokenAccountAddress: PublicKey,\n  userTransferAuthority: PublicKey,\n  amount: number | null,\n  minimumOutAmount: number,\n  platformFee: PlatformFee | undefined,\n) {\n  const remainingAccounts = prepareRemainingAccounts(amount, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsWithdraw(\n    amount ? new BN(amount) : amount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n        wrapper: addDecimals.wrapper,\n        wrapperMint: addDecimals.mint,\n        wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n        owner: userTransferAuthority,\n        userUnderlyingTokens: destinationTokenAccountAddress,\n        userWrappedTokens: sourceTokenAccountAddress,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts,\n    },\n  );\n}\n\nfunction prepareRemainingAccounts(amount: number | null, feeAccount: PublicKey | undefined): AccountMeta[] {\n  const remainingAccounts = [];\n\n  if (amount === null) {\n    remainingAccounts.push({\n      pubkey: TOKEN_LEDGER,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  if (feeAccount) {\n    remainingAccounts.push({\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return remainingAccounts;\n}\n","import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { AccountInfoMap, Amm, QuoteParams, SwapParams } from '../amm';\n// Modified from saber's registry to contain the underlying mint decimal to avoid pointless queries\nimport addDecimalsJson from './add-decimals-complete-state.mainnet-beta.json';\nimport {\n  createSaberAddDecimalsDepositInstruction,\n  createSaberAddDecimalsWithdrawInstruction,\n} from '../jupiterInstruction';\n\nexport interface AddDecimals {\n  wrapper: PublicKey;\n  underlying: PublicKey;\n  underlyingDecimals: number;\n  wrapperUnderlyingTokens: PublicKey;\n  mint: PublicKey;\n  decimals: number;\n}\n\nexport function getSaberWrappedDecimalsAmms() {\n  return addDecimalsJson.map((addDecimalJson) => {\n    const addDecimals = {\n      wrapper: new PublicKey(addDecimalJson.wrapper),\n      underlying: new PublicKey(addDecimalJson.underlying),\n      underlyingDecimals: addDecimalJson.underlyingDecimals,\n      wrapperUnderlyingTokens: new PublicKey(addDecimalJson.wrapperUnderlyingTokens),\n      mint: new PublicKey(addDecimalJson.mint),\n      decimals: addDecimalJson.decimals,\n    };\n\n    return new SaberAddDecimalsAmm(new WrappedToken(addDecimals));\n  });\n}\n\nexport class WrappedToken {\n  constructor(public addDecimals: AddDecimals) {}\n\n  private get multiplier() {\n    return 10 ** (this.addDecimals.decimals - this.addDecimals.underlyingDecimals);\n  }\n\n  getOutputAmount(inputAmount: number, inputMint: PublicKey): JSBI {\n    if (this.addDecimals.mint.equals(inputMint)) {\n      // withdraw, so divide\n      return this.calculateWithdrawOutputAmount(inputAmount);\n    } else if (this.addDecimals.underlying.equals(inputMint)) {\n      // deposit, so multiply\n      return this.calculateDepositOutputAmount(inputAmount);\n    }\n    throw new Error(`unknown input token: ${inputMint.toString()}`);\n  }\n\n  private calculateDepositOutputAmount(inputAmount: number) {\n    return JSBI.multiply(JSBI.BigInt(inputAmount), JSBI.BigInt(this.multiplier));\n  }\n\n  private calculateWithdrawOutputAmount(inputAmount: number) {\n    return JSBI.divide(JSBI.BigInt(inputAmount), JSBI.BigInt(this.multiplier));\n  }\n}\n\n// This isn't technically an Amm but this the smoothest solution to allow its usage without a major refactor of the abstractions for now\nexport class SaberAddDecimalsAmm implements Amm {\n  label = 'Saber (Decimals)' as const;\n\n  constructor(private wrappedToken: WrappedToken) {}\n\n  get id() {\n    return this.wrappedToken.addDecimals.wrapper.toBase58();\n  }\n\n  getAccountsForUpdate() {\n    return new Array<PublicKey>();\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {}\n\n  getQuote({ sourceMint, amount }: QuoteParams) {\n    const outAmount = JSBI.toNumber(this.wrappedToken.getOutputAmount(amount, sourceMint));\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount,\n      feeAmount: 0,\n      feeMint: sourceMint.toBase58(),\n      feePct: 0,\n      priceImpactPct: 0,\n    };\n  }\n\n  createSwapInstructions({\n    sourceMint,\n    sourceTokenAccount,\n    destinationTokenAccount,\n    userTransferAuthority,\n    amount,\n    minimumOutAmount,\n    platformFee,\n  }: SwapParams) {\n    if (this.wrappedToken.addDecimals.underlying.equals(sourceMint)) {\n      return [\n        createSaberAddDecimalsDepositInstruction(\n          this.wrappedToken.addDecimals,\n          sourceTokenAccount,\n          destinationTokenAccount,\n          userTransferAuthority,\n          amount,\n          minimumOutAmount,\n          platformFee,\n        ),\n      ];\n    } else {\n      return [\n        createSaberAddDecimalsWithdrawInstruction(\n          this.wrappedToken.addDecimals,\n          sourceTokenAccount,\n          destinationTokenAccount,\n          userTransferAuthority,\n          amount,\n          minimumOutAmount,\n          platformFee,\n        ),\n      ];\n    }\n  }\n\n  get reserveTokenMints() {\n    return [this.wrappedToken.addDecimals.underlying, this.wrappedToken.addDecimals.mint];\n  }\n}\n","export function getTwoPermutations<T>(array: T[]) {\n  return array.reduce((acc, item) => {\n    array.forEach((otherItem) => {\n      if (item !== otherItem) {\n        acc.push([item, otherItem]);\n      }\n    });\n    return acc;\n  }, new Array<T[]>());\n}\n","import { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { PlatformFee, QuoteMintToReferrer, TokenMintAddress } from '..';\n\nexport interface QuoteParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  amount: number;\n}\n\nexport interface Quote {\n  notEnoughLiquidity: boolean;\n  minInAmount?: number;\n  minOutAmount?: number;\n  inAmount: number;\n  outAmount: number;\n  feeAmount: number;\n  feeMint: TokenMintAddress;\n  feePct: number;\n  priceImpactPct: number;\n}\n\nexport interface SwapParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  sourceTokenAccount: PublicKey;\n  destinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  amount: number | null;\n  minimumOutAmount: number;\n  openOrdersAddress?: PublicKey;\n  platformFee?: PlatformFee;\n  quoteMintToReferrer?: QuoteMintToReferrer;\n}\n\nexport type AccountInfoMap = Map<string, AccountInfo<Buffer> | null>;\n\nexport interface Amm {\n  /* Label for UI usage */\n  label: string;\n  /* Unique id to recognize the AMM */\n  id: string;\n  /* Reserve token mints for the purpose of routing */\n  reserveTokenMints: PublicKey[];\n\n  getAccountsForUpdate(): PublicKey[];\n  update(accountInfoMap: AccountInfoMap): void;\n\n  getQuote(quoteParams: QuoteParams): Quote;\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[];\n}\n\nexport const mapAddressToAccountInfos = (accountInfoMap: AccountInfoMap, addresses: PublicKey[]) => {\n  const accountInfos = addresses.map((address) => {\n    const accountInfo = accountInfoMap.get(address.toString());\n    if (!accountInfo) {\n      throw new Error(`Account info ${address.toBase58()} missing`);\n    }\n    return accountInfo;\n  });\n\n  return accountInfos;\n};\n","// Only a few hardcoded pools for now, until we query the whole lot through api\nimport { struct, nu64 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { publicKey, uint128, uint64 } from '../../utils/layout';\n\ninterface AmmInfoLayoutV4 {\n  status: number;\n  nonce: number;\n  orderNum: number;\n  depth: number;\n  coinDecimals: number;\n  pcDecimals: number;\n  state: number;\n  resetFlag: number;\n  minSize: number;\n  volMaxCutRatio: number;\n  amountWaveRatio: number;\n  coinLotSize: number;\n  pcLotSize: number;\n  minPriceMultiplier: number;\n  maxPriceMultiplier: number;\n  systemDecimalsValue: number;\n  minSeparateNumerator: number;\n  minSeparateDenominator: number;\n  tradeFeeNumerator: number;\n  tradeFeeDenominator: number;\n  pnlNumerator: number;\n  pnlDenominator: number;\n  swapFeeNumerator: number;\n  swapFeeDenominator: number;\n  needTakePnlCoin: number;\n  needTakePnlPc: number;\n  totalPnlPc: number;\n  totalPnlCoin: number;\n  poolTotalDepositPc: u64;\n  poolTotalDepositCoin: u64;\n  swapCoinInAmount: u64;\n  swapPcOutAmount: u64;\n  swapCoin2PcFee: number;\n  swapPcInAmount: u64;\n  swapCoinOutAmount: u64;\n  swapPc2CoinFee: number;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  coinMintAddress: PublicKey;\n  pcMintAddress: PublicKey;\n  lpMintAddress: PublicKey;\n  ammOpenOrders: PublicKey;\n  serumMarket: PublicKey;\n  serumProgramId: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolWithdrawQueue: PublicKey;\n  poolTempLpTokenAccount: PublicKey;\n  ammOwner: PublicKey;\n  pnlOwner: PublicKey;\n}\n\nexport const AMM_INFO_LAYOUT_V4 = struct<AmmInfoLayoutV4>([\n  nu64('status'),\n  nu64('nonce'),\n  nu64('orderNum'),\n  nu64('depth'),\n  nu64('coinDecimals'),\n  nu64('pcDecimals'),\n  nu64('state'),\n  nu64('resetFlag'),\n  nu64('minSize'),\n  nu64('volMaxCutRatio'),\n  nu64('amountWaveRatio'),\n  nu64('coinLotSize'),\n  nu64('pcLotSize'),\n  nu64('minPriceMultiplier'),\n  nu64('maxPriceMultiplier'),\n  nu64('systemDecimalsValue'),\n  // Fees\n  nu64('minSeparateNumerator'),\n  nu64('minSeparateDenominator'),\n  nu64('tradeFeeNumerator'),\n  nu64('tradeFeeDenominator'),\n  nu64('pnlNumerator'),\n  nu64('pnlDenominator'),\n  nu64('swapFeeNumerator'),\n  nu64('swapFeeDenominator'),\n  // OutPutData\n  nu64('needTakePnlCoin'),\n  nu64('needTakePnlPc'),\n  nu64('totalPnlPc'),\n  nu64('totalPnlCoin'),\n  uint128('poolTotalDepositPc'),\n  uint128('poolTotalDepositCoin'),\n  uint128('swapCoinInAmount'),\n  uint128('swapPcOutAmount'),\n  nu64('swapCoin2PcFee'),\n  uint128('swapPcInAmount'),\n  uint128('swapCoinOutAmount'),\n  nu64('swapPc2CoinFee'),\n\n  publicKey('poolCoinTokenAccount'),\n  publicKey('poolPcTokenAccount'),\n  publicKey('coinMintAddress'),\n  publicKey('pcMintAddress'),\n  publicKey('lpMintAddress'),\n  publicKey('ammOpenOrders'),\n  publicKey('serumMarket'),\n  publicKey('serumProgramId'),\n  publicKey('ammTargetOrders'),\n  publicKey('poolWithdrawQueue'),\n  publicKey('poolTempLpTokenAccount'),\n  publicKey('ammOwner'),\n  publicKey('pnlOwner'),\n]);\n","// https://github.com/raydium-io/raydium-ui/blob/4048286f79fc4b71c3ffbfd9095470ab0c7d3862/src/utils/liquidity.ts#L30-L82\n\nimport { createProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { Market, OpenOrders } from '@project-serum/serum';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport Decimal from 'decimal.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createRaydiumSwapInstruction } from '../jupiterInstruction';\nimport { AMM_INFO_LAYOUT_V4 } from './pools';\n\n// Explained here\n// https://discordapp.com/channels/813741812598439958/813750197423308820/900288485028683776\n// total_pc = amminfo.pc_vault.balance + amminfo.openorder.total_quote - amminfo.need_taken_pnl_pc\n// total_coin = amminfo.coin_vault.balance + amminfo.openorder.total_base - amminfo.need_taken_pnl_coin\n\ntype SerumMarketKeys = {\n  serumBids: PublicKey;\n  serumAsks: PublicKey;\n  serumEventQueue: PublicKey;\n  serumCoinVaultAccount: PublicKey;\n  serumPcVaultAccount: PublicKey;\n  serumVaultSigner: PublicKey;\n};\n\nexport class RaydiumAmm implements Amm {\n  label = 'Raydium' as const;\n\n  coinMint: PublicKey;\n  pcMint: PublicKey;\n\n  status: number;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  ammOpenOrders: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n\n  serumMarketKeys: SerumMarketKeys | undefined;\n\n  coinReserve: u64 | undefined;\n  pcReserve: u64 | undefined;\n\n  swapFeeNumerator: u64;\n  swapFeeDenominator: u64;\n\n  constructor(public ammId: PublicKey, public ammAccountInfo: AccountInfo<Buffer>) {\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.status = decoded.status;\n    this.coinMint = new PublicKey(decoded.coinMintAddress);\n    this.pcMint = new PublicKey(decoded.pcMintAddress);\n\n    this.poolCoinTokenAccount = new PublicKey(decoded.poolCoinTokenAccount);\n    this.poolPcTokenAccount = new PublicKey(decoded.poolPcTokenAccount);\n\n    this.swapFeeNumerator = new u64(decoded.swapFeeNumerator);\n    this.swapFeeDenominator = new u64(decoded.swapFeeDenominator);\n\n    this.serumProgramId = new PublicKey(decoded.serumProgramId);\n    this.serumMarket = new PublicKey(decoded.serumMarket);\n    this.ammOpenOrders = new PublicKey(decoded.ammOpenOrders);\n    this.ammTargetOrders = new PublicKey(decoded.ammTargetOrders);\n  }\n\n  get id() {\n    return this.ammId.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.ammId, this.poolCoinTokenAccount, this.poolPcTokenAccount, this.ammOpenOrders, this.serumMarket];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const [\n      ammAccountInfo,\n      poolCoinTokenAccountInfo,\n      poolPcTokenAccountInfo,\n      ammOpenOrdersAccountInfo,\n      serumMarketMarketInfo,\n    ] = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.ammAccountInfo = ammAccountInfo!;\n\n    const [coinAmount, pcAmount] = [\n      RaydiumAmm.tokenAmountAccessor(poolCoinTokenAccountInfo!),\n      RaydiumAmm.tokenAmountAccessor(poolPcTokenAccountInfo!),\n    ];\n\n    const openOrders = OpenOrders.fromAccountInfo(\n      this.ammOpenOrders,\n      ammOpenOrdersAccountInfo!,\n      ammOpenOrdersAccountInfo!.owner,\n    );\n\n    // TODO: Possibly better design is to have this passed to the ctor, so it isn't an independant instruction\n    const decodedMarket = Market.getLayout(this.serumProgramId).decode(serumMarketMarketInfo!.data);\n    const serumVaultSigner = createProgramAddressSync(\n      [this.serumMarket.toBuffer(), decodedMarket.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n      this.serumProgramId,\n    );\n    this.serumMarketKeys = {\n      serumBids: decodedMarket.bids,\n      serumAsks: decodedMarket.asks,\n      serumEventQueue: decodedMarket.eventQueue,\n      serumCoinVaultAccount: decodedMarket.baseVault,\n      serumPcVaultAccount: decodedMarket.quoteVault,\n      serumVaultSigner: serumVaultSigner,\n    };\n\n    const decoded = AMM_INFO_LAYOUT_V4.decode(this.ammAccountInfo.data);\n\n    this.coinReserve = coinAmount.add(openOrders.baseTokenTotal).sub(new u64(String(decoded.needTakePnlCoin)));\n\n    this.pcReserve = pcAmount.add(openOrders.quoteTokenTotal).sub(new u64(String(decoded.needTakePnlPc)));\n  }\n\n  private static tokenAmountAccessor(tokenAccountInfo: AccountInfo<Buffer>): u64 {\n    return u64.fromBuffer(tokenAccountInfo.data.slice(64, 64 + 8));\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (!this.coinReserve || !this.pcReserve) {\n      throw new Error('Pool token accounts balances not refreshed or empty');\n    }\n\n    const { coinReserve, pcReserve } = this;\n\n    const [inputReserve, outputReserve] = this.coinMint.equals(sourceMint)\n      ? [coinReserve, pcReserve]\n      : [pcReserve, coinReserve];\n\n    const inAmountBN = new BN(String(amount));\n    const feeAmount = inAmountBN.mul(this.swapFeeNumerator).div(this.swapFeeDenominator);\n    const inAmountAfterFee = inAmountBN.sub(feeAmount);\n\n    const numerator = inAmountAfterFee.mul(outputReserve);\n    const denominator = inputReserve.add(inAmountAfterFee);\n\n    const outAmountWithoutPriceImpact = inAmountAfterFee.mul(outputReserve).div(inputReserve);\n\n    const outAmountBN = numerator.div(denominator);\n    const outAmount = Number(outAmountBN.toString());\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount,\n      feeAmount: Number(feeAmount.toString()),\n      feeMint: sourceMint.toBase58(),\n      feePct: Number(new Decimal(this.swapFeeNumerator.toString()).div(this.swapFeeDenominator.toString()).toString()),\n      priceImpactPct: Number(\n        new Decimal(outAmountWithoutPriceImpact.sub(outAmountBN).toString())\n          .div(outAmountWithoutPriceImpact.toString())\n          .toString(),\n      ),\n    };\n  }\n\n  createSwapInstructions({\n    sourceTokenAccount,\n    destinationTokenAccount,\n    userTransferAuthority,\n    amount,\n    minimumOutAmount,\n    platformFee,\n  }: SwapParams) {\n    return [\n      createRaydiumSwapInstruction(\n        this,\n        sourceTokenAccount,\n        destinationTokenAccount,\n        userTransferAuthority,\n        amount,\n        minimumOutAmount,\n        platformFee,\n      ),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.coinMint, this.pcMint];\n  }\n}\n","import { Market, Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\n\nconst TAKER_FEE_PCT = 0.0004;\nconst STABLE_TAKER_FEE_PCT = 0.0001;\n\n// Stable markets are hardcoded in the program\nconst STABLE_MARKET_ADDRESSES = [\n  '77quYg4MGneUdjgXCunt9GgM1usmrxKY31twEy3WHwcS', // USDT/USDC\n  '5cLrMai1DsLRYc1Nio9qMTicsWtvzjzZfJPXyAoF4t1Z', // mSOL/SOL\n];\n\ninterface IMarketMeta {\n  /** buy or sell side */\n  side: 'buy' | 'sell';\n  /** indicate that your order is too huge for the market */\n  notEnoughLiquidity: boolean;\n  /** minimum in amount and the corresponding out amount */\n  minimum: {\n    in: number;\n    out: number;\n  };\n  /** amount in taken for the trade */\n  inAmount: number;\n  /** the amount out for the trade */\n  outAmount: number;\n  /** the total fee amount */\n  feeAmount: number;\n  /** price impact percentage */\n  priceImpactPct: number;\n  /** fee percentage */\n  feePct: number;\n}\n\n// Provides swap like out amount, with slippage and corresponding minimum amount out\nexport function getOutAmountMeta({\n  market,\n  asks,\n  bids,\n  fromAmount,\n  fromMint,\n  toMint,\n}: {\n  market: Market;\n  asks: Orderbook;\n  bids: Orderbook;\n  fromMint: PublicKey;\n  toMint: PublicKey;\n  fromAmount: number;\n}) {\n  const takerFeePct = STABLE_MARKET_ADDRESSES.includes(market.address.toBase58())\n    ? STABLE_TAKER_FEE_PCT\n    : TAKER_FEE_PCT;\n\n  if (fromMint.equals(market.quoteMintAddress) && toMint.equals(market.baseMintAddress)) {\n    // buy\n    return forecastBuy(market, asks, fromAmount, takerFeePct);\n  } else {\n    return forecastSell(market, bids, fromAmount, takerFeePct);\n  }\n}\n\nexport function forecastBuy(market: Market, orderBook: Orderbook, pcIn: number, takerFeePct: number): IMarketMeta {\n  let coinOut = 0;\n  let bestPrice = 0;\n  let worstPrice = 0;\n  // total base price\n  let totalCost = 0;\n  let totalCoins = 0;\n\n  // Serum buy order take fee in quote tokens\n  let availablePc = pcIn / (1 + takerFeePct);\n\n  const baseSizeLots = market.baseSizeLotsToNumber(new BN(1));\n  const quoteSizeLots = market.quoteSizeLotsToNumber(new BN(1));\n\n  for (const order of orderBook.items(false)) {\n    const price = market.priceLotsToNumber(order.priceLots);\n    const size = market.baseSizeLotsToNumber(order.sizeLots);\n    totalCoins += size;\n\n    if (!bestPrice && price !== 0) {\n      bestPrice = price;\n    }\n    worstPrice = price;\n\n    const orderCoinAmount = order.sizeLots.toNumber() * baseSizeLots;\n    const orderPcAmount = order.sizeLots.toNumber() * order.priceLots.toNumber() * quoteSizeLots;\n\n    const lotPrice = order.priceLots.toNumber() * quoteSizeLots;\n\n    if (orderPcAmount >= availablePc) {\n      const numberLotsCanBuy = Math.floor(availablePc / lotPrice);\n      totalCost += numberLotsCanBuy * lotPrice;\n      coinOut += numberLotsCanBuy * baseSizeLots;\n      availablePc -= numberLotsCanBuy * lotPrice;\n      break;\n    } else {\n      totalCost += order.sizeLots.toNumber() * lotPrice;\n      coinOut += orderCoinAmount;\n      availablePc -= orderPcAmount;\n    }\n  }\n\n  const priceImpactPct = bestPrice ? (worstPrice - bestPrice) / bestPrice : 0;\n\n  return {\n    side: 'buy',\n    notEnoughLiquidity: totalCoins <= coinOut,\n    minimum: {\n      in: Math.ceil(baseSizeLots * bestPrice * (1 + takerFeePct)),\n      out: baseSizeLots,\n    },\n    inAmount: Math.ceil(totalCost * (1 + takerFeePct)),\n    outAmount: coinOut,\n    feeAmount: Math.round(totalCost * takerFeePct),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function forecastSell(market: Market, orderBook: Orderbook, coinIn: number, takerFeePct: number): IMarketMeta {\n  let pcOut = 0;\n  let bestPrice = 0;\n  let worstPrice = 0;\n  let availableCoin = coinIn;\n  let inAmount = 0;\n\n  const baseSizeLots = market.baseSizeLotsToNumber(new BN(1));\n  const quoteSizeLots = market.quoteSizeLotsToNumber(new BN(1));\n\n  for (const order of orderBook.items(true)) {\n    const price = market.priceLotsToNumber(order.priceLots);\n\n    if (!bestPrice && price !== 0) {\n      bestPrice = price;\n    }\n\n    worstPrice = price;\n\n    const orderCoinAmount = order.sizeLots.toNumber() * baseSizeLots;\n    const orderPcAmount = order.sizeLots.toNumber() * order.priceLots.toNumber() * quoteSizeLots;\n\n    if (availableCoin <= orderCoinAmount) {\n      const numberLotsCanSell = Math.floor(availableCoin / baseSizeLots);\n      pcOut += numberLotsCanSell * order.priceLots.toNumber() * quoteSizeLots;\n      availableCoin = 0;\n      inAmount += numberLotsCanSell * baseSizeLots;\n      break;\n    } else {\n      pcOut += orderPcAmount;\n      availableCoin -= orderCoinAmount;\n      inAmount += orderCoinAmount;\n    }\n  }\n\n  pcOut = Math.floor(pcOut * (1 - takerFeePct));\n\n  const priceImpactPct = bestPrice ? (bestPrice - worstPrice) / bestPrice : 0;\n\n  return {\n    side: 'sell',\n    notEnoughLiquidity: availableCoin > 0,\n    minimum: {\n      in: baseSizeLots,\n      out: Math.ceil(baseSizeLots * bestPrice * (1 - takerFeePct)),\n    },\n    inAmount: inAmount,\n    outAmount: pcOut,\n    feeAmount: Math.round(pcOut * takerFeePct),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n","import { Orderbook } from '@project-serum/serum';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createSerumSwapInstruction } from '../jupiterInstruction';\nimport { SerumMarket } from '../market';\nimport { getOutAmountMeta } from './market';\n\nexport class SerumAmm implements Amm {\n  label = 'Serum' as const;\n  private orderbooks: { asks: Orderbook; bids: Orderbook } | undefined;\n\n  constructor(public market: SerumMarket) {}\n\n  get id() {\n    return this.market.address.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.market.asksAddress, this.market.bidsAddress];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [asksAccountInfo, bidsAccountInfo] = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const asks = Orderbook.decode(this.market, asksAccountInfo.data);\n    const bids = Orderbook.decode(this.market, bidsAccountInfo.data);\n\n    this.orderbooks = {\n      asks,\n      bids,\n    };\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (!this.orderbooks) {\n      throw new Error('Failed to find orderbooks');\n    }\n\n    const outAmountMeta = getOutAmountMeta({\n      market: this.market,\n      asks: this.orderbooks.asks,\n      bids: this.orderbooks.bids,\n      fromMint: sourceMint,\n      toMint: destinationMint,\n      fromAmount: amount,\n    });\n\n    return {\n      notEnoughLiquidity: outAmountMeta.notEnoughLiquidity,\n      minInAmount: outAmountMeta.minimum.in,\n      minOutAmount: outAmountMeta.minimum.out,\n      inAmount: outAmountMeta.inAmount,\n      outAmount: outAmountMeta.outAmount,\n      feeAmount: outAmountMeta.feeAmount,\n      feeMint: this.market.quoteMintAddress.toBase58(),\n      feePct: outAmountMeta.feePct,\n      priceImpactPct: outAmountMeta.priceImpactPct,\n    };\n  }\n\n  createSwapInstructions({\n    sourceMint,\n    sourceTokenAccount,\n    destinationTokenAccount,\n    userTransferAuthority,\n    amount,\n    minimumOutAmount,\n    openOrdersAddress,\n    platformFee,\n    quoteMintToReferrer,\n  }: SwapParams) {\n    if (!openOrdersAddress) {\n      throw new Error('Missing open orders');\n    }\n\n    return [\n      createSerumSwapInstruction(\n        this.market,\n        sourceMint,\n        openOrdersAddress,\n        sourceTokenAccount,\n        destinationTokenAccount,\n        userTransferAuthority,\n        amount,\n        minimumOutAmount,\n        platformFee,\n        quoteMintToReferrer?.get(this.market.quoteMintAddress.toBase58()),\n      ),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.market.baseMintAddress, this.market.quoteMintAddress];\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { getTwoPermutations } from '../../utils/getTwoPermutations';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { RaydiumAmm } from '../raydium/raydiumAmm';\nimport { createRiskCheckAndFeeInstruction, createSetTokenLedgerInstruction } from '../jupiterInstruction';\nimport { SerumAmm } from '../serum/serumAmm';\nimport { SerumMarket } from '../market';\n\ninterface SplitSolution {\n  outAmount: number;\n  portion: number;\n  firstQuote: Quote | undefined;\n  secondQuote: Quote | undefined;\n}\n\nfunction isSplitSupported(firstAmm: Amm, secondAmm: Amm) {\n  if (\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm) ||\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm)\n  ) {\n    return false;\n  }\n  return true;\n}\n\nfunction requiresSplitSetup(firstAmm: Amm, secondAmm: Amm): boolean {\n  if (firstAmm instanceof RaydiumAmm || secondAmm instanceof RaydiumAmm) {\n    return true;\n  } else if (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm) {\n    return true;\n  }\n  return false;\n}\n\n// Create an iteration to quote with a stepped split\nexport class SplitTradeAmm implements Amm {\n  shouldSplitSetup: boolean;\n  market: SerumMarket | null;\n  private portion1: number = 0;\n  private portion2: number = 0;\n\n  constructor(private firstAmm: Amm, private secondAmm: Amm, public reserveTokenMints: PublicKey[]) {\n    this.shouldSplitSetup = requiresSplitSetup(firstAmm, secondAmm);\n    this.market =\n      firstAmm instanceof SerumAmm ? firstAmm.market : secondAmm instanceof SerumAmm ? secondAmm.market : null;\n  }\n\n  static create(firstAmm: Amm, secondAmm: Amm) {\n    if (!isSplitSupported(firstAmm, secondAmm)) return;\n\n    const firstAmmTwoPermutations = getTwoPermutations(firstAmm.reserveTokenMints);\n    const secondAmmTwoPermutations = getTwoPermutations(secondAmm.reserveTokenMints);\n\n    for (const firstAmmTwoPermutation of firstAmmTwoPermutations) {\n      for (const secondAmmTwoPermutation of secondAmmTwoPermutations) {\n        if (firstAmmTwoPermutation.every((value, index) => value.equals(secondAmmTwoPermutation[index]))) {\n          return new SplitTradeAmm(firstAmm, secondAmm, firstAmmTwoPermutation);\n        }\n      }\n    }\n  }\n\n  get id() {\n    return `${this.firstAmm.id}-${this.secondAmm.id}`;\n  }\n\n  get label() {\n    const labelWithPortions = [\n      { label: this.firstAmm.label, portion: this.portion1 },\n      { label: this.secondAmm.label, portion: this.portion2 },\n    ].sort((a, b) => b.portion - a.portion);\n\n    return labelWithPortions.map(({ label, portion }) => `${label} (${portion}%)`).join(' + ');\n  }\n\n  getAccountsForUpdate() {\n    return [];\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {\n    // Underlying amms are updated\n  }\n\n  getQuote(quoteParams: QuoteParams): Quote {\n    const sourceMintString = quoteParams.sourceMint.toBase58();\n    const amount = quoteParams.amount;\n    // Portion in % directly to please the UI\n    let bestSolution: SplitSolution = {\n      outAmount: 0,\n      portion: 0,\n      firstQuote: undefined,\n      secondQuote: undefined,\n    };\n\n    // Increase portion until 100\n    for (let p = 100; (p -= 5); p > 0) {\n      const firstAmount = Math.floor((amount * p) / 100);\n      const secondAmount = amount - firstAmount;\n\n      const firstQuote = this.firstAmm.getQuote({\n        ...quoteParams,\n        amount: firstAmount,\n      });\n      const secondQuote = this.secondAmm.getQuote({\n        ...quoteParams,\n        amount: secondAmount,\n      });\n      const outAmount = firstQuote.outAmount + secondQuote.outAmount;\n\n      if (outAmount < bestSolution.outAmount) {\n        break;\n      }\n\n      bestSolution = {\n        outAmount,\n        portion: p,\n        firstQuote,\n        secondQuote,\n      };\n    }\n\n    if (!bestSolution.firstQuote || !bestSolution.secondQuote) {\n      throw new Error('Unreachable: There was no better solution than getting 0 outAmount');\n    }\n\n    const { outAmount, portion, firstQuote, secondQuote } = bestSolution;\n    const portion1 = portion;\n    const portion2 = 100 - portion1;\n\n    // For UI display\n    this.portion1 = portion1;\n    this.portion2 = portion2;\n\n    let firstAmmFee = {\n      amount: firstQuote.feeAmount,\n      mint: firstQuote.feeMint,\n    };\n    let secondAmmFee = {\n      amount: secondQuote.feeAmount,\n      mint: secondQuote.feeMint,\n    };\n\n    if (firstAmmFee.mint !== secondAmmFee.mint) {\n      // Then we convert destinationMint fee into a sourceMint, to please the current data structure\n      // This will lead to inexact fees but this doesn't affect the user minimum out amount\n      if (firstAmmFee.mint !== sourceMintString) {\n        firstAmmFee = {\n          amount: Math.floor((firstAmmFee.amount * amount * portion1) / 100 / bestSolution.outAmount),\n          mint: sourceMintString,\n        };\n      }\n      if (secondAmmFee.mint !== sourceMintString) {\n        secondAmmFee = {\n          amount: Math.floor((secondAmmFee.amount * amount * portion2) / 100 / bestSolution.outAmount),\n          mint: sourceMintString,\n        };\n      }\n    }\n\n    const feePct = (portion1 * firstQuote.feePct + portion2 * secondQuote.feePct) / 100;\n    const priceImpactPct = (portion1 * firstQuote.priceImpactPct + portion2 * secondQuote.priceImpactPct) / 100;\n\n    // Not sure about the relevance on minInAmount and minOutAmount in this case\n    const minInAmount =\n      firstQuote.minInAmount || secondQuote.minInAmount\n        ? (firstQuote.minInAmount ?? 0) + (secondQuote.minInAmount ?? 0)\n        : undefined;\n    const minOutAmount =\n      firstQuote.minOutAmount || secondQuote.minOutAmount\n        ? (firstQuote.minOutAmount ?? 0) + (secondQuote.minOutAmount ?? 0)\n        : undefined;\n    return {\n      notEnoughLiquidity: false,\n      inAmount: quoteParams.amount,\n      outAmount: outAmount,\n      minInAmount,\n      minOutAmount,\n      feeAmount: firstAmmFee.amount + secondAmmFee.amount,\n      feeMint: firstAmmFee.mint, // Guaranteed identical mint at this point\n      feePct,\n      priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const amount = swapParams.amount!; // Cannot be null!\n\n    // We rely on the fact that this.portion1 is set, what if it isn't?\n    const firstAmount = Math.floor((amount * this.portion1) / 100);\n    const secondAmount = amount - firstAmount;\n\n    return [\n      createSetTokenLedgerInstruction(swapParams.destinationTokenAccount),\n      ...this.firstAmm.createSwapInstructions({\n        ...swapParams,\n        amount: firstAmount,\n        minimumOutAmount: 0,\n        platformFee: undefined,\n      }),\n      ...this.secondAmm.createSwapInstructions({\n        ...swapParams,\n        amount: secondAmount,\n        minimumOutAmount: 0,\n        platformFee: undefined,\n      }),\n      createRiskCheckAndFeeInstruction(\n        swapParams.destinationTokenAccount,\n        swapParams.userTransferAuthority,\n        swapParams.minimumOutAmount,\n        swapParams.platformFee,\n      ),\n    ];\n  }\n}\n","import { Market as SerumMarket } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport { MarketMeta } from './types';\nimport { SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\n\nexport interface Fee {\n  amount: number;\n  mint: string;\n  pct: number;\n}\n\nexport { SerumMarket, StableSwap };\n\nexport interface MarketInfo {\n  marketMeta: MarketMeta; //name: string, // pair for serum, pool name for mer pool\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  minInAmount?: number;\n  minOutAmount?: number;\n  inAmount: number;\n  outAmount: number;\n  notEnoughLiquidity: boolean;\n  priceImpactPct: number;\n  lpFee: Fee;\n  platformFee: Fee;\n}\n\n// This is to check if the two markets are supported by the aggregator\nexport const isValidRoute = (ammA: MarketMeta['amm'], ammB: MarketMeta['amm']) => {\n  // don't show decimal as input or output\n  if (ammA instanceof SaberAddDecimalsAmm && ammB instanceof SaberAddDecimalsAmm) {\n    return false;\n  } else if (ammA instanceof SplitTradeAmm || ammB instanceof SplitTradeAmm) {\n    return false;\n  }\n\n  return true;\n};\n","import { AccountInfo, AccountLayout, u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nexport const deserializeAccount = (data: Buffer | undefined): AccountInfo | undefined => {\n  if (data == undefined || data.length == 0) {\n    return undefined;\n  }\n\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n","import { StableSwap } from '@saberhq/stableswap-sdk';\nimport { PublicKey } from '@solana/web3.js';\nimport { Fraction, ONE, Stable } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createSaberExchangeInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '../../utils/deserializeAccount';\nimport { AccountInfo } from '@solana/spl-token';\nimport { ZERO_FRACTION } from '../../constants';\n\nexport class SaberAmm implements Amm {\n  label = 'Saber' as const;\n  private tokenAccounts: AccountInfo[] | undefined;\n  private calculator: Stable | undefined;\n\n  constructor(private stableSwap: StableSwap) {}\n\n  get id() {\n    return this.stableSwap.config.swapAccount.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.stableSwap.state.tokenA.reserve, this.stableSwap.state.tokenB.reserve];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account data');\n      }\n      return tokenAccount;\n    });\n\n    this.calculator = new Stable(\n      JSBI.BigInt(this.stableSwap.state.targetAmpFactor.toString()),\n      this.tokenAccounts.map((tokenAccount) => {\n        return JSBI.BigInt(tokenAccount.amount.toString());\n      }),\n      [ONE, ONE], // TODO: How to get the token decimal?\n      new Fraction(this.stableSwap.state.fees.trade.numerator, this.stableSwap.state.fees.trade.denominator),\n    );\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (!this.tokenAccounts) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    if (this.calculator === undefined) {\n      throw new Error('Unable to fetch accounts for Curve calculator.');\n    }\n\n    const feePct = new Decimal(this.stableSwap.state.fees.trade.asFraction.toFixed(4));\n\n    const [inputIndex, outputIndex] = this.tokenAccounts[0].mint.equals(sourceMint) ? [0, 1] : [1, 0];\n\n    const result = this.calculator.exchange(JSBI.BigInt(amount), ZERO_FRACTION, inputIndex, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions({\n    sourceMint,\n    sourceTokenAccount,\n    destinationTokenAccount,\n    userTransferAuthority,\n    amount,\n    minimumOutAmount,\n    platformFee,\n  }: SwapParams) {\n    // The input or output might require the magic wrapping\n    return [\n      createSaberExchangeInstruction(\n        this.stableSwap,\n        sourceMint,\n        sourceTokenAccount,\n        destinationTokenAccount,\n        userTransferAuthority,\n        amount,\n        minimumOutAmount,\n        platformFee,\n      ),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.stableSwap.state.tokenA.mint, this.stableSwap.state.tokenB.mint];\n  }\n}\n","import { u64 } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\nconst ZERO = new u64(0);\n\nexport class Percentage {\n  readonly numerator: u64;\n  readonly denominator: u64;\n\n  constructor(numerator: u64, denominator: u64) {\n    this.numerator = numerator;\n    this.denominator = denominator;\n  }\n\n  public static fromDecimal(number: Decimal): Percentage {\n    return Percentage.fromFraction(number.toDecimalPlaces(1).mul(10).toNumber(), 1000);\n  }\n\n  public static fromFraction(numerator: u64 | number, denominator: u64 | number): Percentage {\n    const num = typeof numerator === 'number' ? new u64(numerator.toString()) : numerator;\n    const denom = typeof denominator === 'number' ? new u64(denominator.toString()) : denominator;\n    return new Percentage(num, denom);\n  }\n\n  public toString = (): string => {\n    return `${this.numerator.toString()}/${this.denominator.toString()}`;\n  };\n\n  public toDecimal() {\n    if (this.denominator.eq(ZERO)) {\n      return new Decimal(0);\n    }\n    return new Decimal(this.numerator.toString()).div(new Decimal(this.denominator.toString()));\n  }\n\n  public add(p2: Percentage): Percentage {\n    const denomGcd = this.denominator.gcd(p2.denominator);\n    const denomLcm = this.denominator.div(denomGcd).mul(p2.denominator);\n\n    const p1DenomAdjustment = denomLcm.div(this.denominator);\n    const p2DenomAdjustment = denomLcm.div(p2.denominator);\n\n    const p1NumeratorAdjusted = this.numerator.mul(p1DenomAdjustment);\n    const p2NumeratorAdjusted = p2.numerator.mul(p2DenomAdjustment);\n\n    const newNumerator = p1NumeratorAdjusted.add(p2NumeratorAdjusted);\n\n    return new Percentage(new u64(newNumerator.toString()), new u64(denomLcm.toString()));\n  }\n}\n","import { struct, blob, u8, Structure } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { ALDRIN_SWAP_V2_PROGRAM_ID } from '../../constants';\nimport { publicKey, rustEnum, uint64 } from '../../utils/layout';\nimport { Percentage } from './percentage';\n\ntype FeeStructure = {\n  traderFee: Percentage;\n  ownerFee: Percentage;\n};\n\ninterface FeeLayout {\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n}\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/78527e3adfc02e186956f420b5083fa0950e7263/src/pools/layout.ts\nconst FEES_LAYOUT = struct<FeeLayout>(\n  [\n    uint64('tradeFeeNumerator'),\n    uint64('tradeFeeDenominator'),\n    uint64('ownerTradeFeeNumerator'),\n    uint64('ownerTradeFeeDenominator'),\n    uint64('ownerWithdrawFeeNumerator'),\n    uint64('ownerWithdrawFeeDenominator'),\n  ],\n  'fees',\n);\n\nconst POOL_FIELDS_COMMON = [\n  blob(8, 'padding'),\n  publicKey('lpTokenFreezeVault'),\n  publicKey('poolMint'),\n  publicKey('baseTokenVault'),\n  publicKey('baseTokenMint'),\n  publicKey('quoteTokenVault'),\n  publicKey('quoteTokenMint'),\n  publicKey('poolSigner'),\n  u8('poolSignerNonce'),\n  publicKey('authority'),\n  publicKey('initializerAccount'),\n  publicKey('feeBaseAccount'),\n  publicKey('feeQuoteAccount'),\n  publicKey('feePoolTokenAccount'),\n  FEES_LAYOUT,\n];\n\ninterface PoolLayout {\n  padding: any;\n  lpTokenFreezeVault: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  poolSignerNonce: number;\n  authority: PublicKey;\n  initializerAccount: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeLayout;\n}\n\nexport const POOL_LAYOUT = struct<PoolLayout>(POOL_FIELDS_COMMON);\n\ninterface PoolV2Layout extends PoolLayout {\n  curveType: number;\n  curve: PublicKey;\n}\n\nexport const POOL_V2_LAYOUT = struct<PoolV2Layout>([...POOL_FIELDS_COMMON, u8('curveType'), publicKey('curve')]);\n\ninterface StableCurveLayout {\n  padding: any;\n  amp: u64;\n}\n\nexport const STABLE_CURVE_LAYOUT = struct<StableCurveLayout>([blob(8, 'padding'), uint64('amp')]);\n\ninterface SwapInstructionLayout {\n  instruction: any;\n  tokens: u64;\n  minTokens: u64;\n  side: 'bid' | 'ask';\n}\n\nexport const SWAP_INSTRUCTION_LAYOUT = struct<SwapInstructionLayout>([\n  blob(8, 'instruction'),\n  uint64('tokens'),\n  uint64('minTokens'),\n  rustEnum([new Structure([], 'bid'), new Structure([], 'ask')], 'side'),\n]);\n\nexport function accountInfoToAldrinPoolState(address: PublicKey, accountInfo: AccountInfo<Buffer>): AldrinPoolState {\n  const isV2 = accountInfo.owner.equals(ALDRIN_SWAP_V2_PROGRAM_ID) ? true : false;\n\n  const decoded: PoolV2Layout | PoolLayout = (isV2 ? POOL_V2_LAYOUT : POOL_LAYOUT).decode(accountInfo.data) as\n    | PoolV2Layout\n    | PoolLayout;\n\n  const curveObject = 'curveType' in decoded ? { curveType: decoded.curveType, curve: decoded.curve } : {};\n\n  return {\n    isV2,\n    address,\n    poolMint: decoded.poolMint,\n    baseTokenVault: decoded.baseTokenVault,\n    baseTokenMint: decoded.baseTokenMint,\n    quoteTokenVault: decoded.quoteTokenVault,\n    quoteTokenMint: decoded.quoteTokenMint,\n    poolSigner: decoded.poolSigner,\n    feeBaseAccount: decoded.feeBaseAccount,\n    feeQuoteAccount: decoded.feeQuoteAccount,\n    feePoolTokenAccount: decoded.feePoolTokenAccount,\n    fees: {\n      traderFee: Percentage.fromFraction(decoded.fees.tradeFeeNumerator, decoded.fees.tradeFeeDenominator),\n      ownerFee: Percentage.fromFraction(decoded.fees.ownerTradeFeeNumerator, decoded.fees.ownerTradeFeeDenominator),\n    },\n    ...curveObject,\n  };\n}\n\nexport interface AldrinPoolState {\n  isV2: Boolean;\n  address: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeStructure;\n  curveType?: number;\n  curve?: PublicKey;\n}\n","import { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '../../utils/deserializeAccount';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createAldrinSwapInstruction, createAldrinV2SwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToAldrinPoolState, AldrinPoolState, STABLE_CURVE_LAYOUT } from './poolState';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\nimport { ZERO_FRACTION } from '../../constants';\n\ninterface AldrinParams {\n  amp?: number;\n}\n\nexport class AldrinAmm implements Amm {\n  label = 'Aldrin' as const;\n  poolState: AldrinPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable | undefined;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: AldrinParams = {}) {\n    this.poolState = accountInfoToAldrinPoolState(address, accountInfo);\n  }\n\n  static decodeStableCurveAmp(accountInfo: AccountInfo<Buffer>) {\n    const { amp } = STABLE_CURVE_LAYOUT.decode(accountInfo.data);\n\n    return amp.toNumber() * 2; // times two for their AMP, dont ask me why, it is what it is\n  }\n\n  get id() {\n    return this.poolState.address.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.quoteTokenVault, this.poolState.baseTokenVault];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n\n    if (!this.poolState.curveType) {\n      this.calculator = new TokenSwapConstantProduct(\n        this.tokenAccounts.map((tokenAccount) => {\n          return JSBI.BigInt(tokenAccount.amount.toString());\n        }),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    } else if (this.poolState.curveType === 1) {\n      const { amp } = this.params;\n      if (!amp) {\n        throw new Error('Amp is required for a stable curve');\n      }\n\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(amp),\n        this.tokenAccounts.map((tokenAccount) => {\n          return JSBI.BigInt(tokenAccount.amount.toString());\n        }),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    }\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    if (this.calculator === undefined) {\n      throw new Error('Unable to fetch accounts for Curve calculator.');\n    }\n\n    let feePct = new Decimal(this.poolState.fees.traderFee.numerator.toString())\n      .div(this.poolState.fees.traderFee.denominator.toString())\n      .add(\n        new Decimal(this.poolState.fees.ownerFee.numerator.toString()).div(\n          this.poolState.fees.ownerFee.denominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(JSBI.BigInt(amount), ZERO_FRACTION, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions({\n    sourceMint,\n    sourceTokenAccount,\n    destinationTokenAccount,\n    userTransferAuthority,\n    amount,\n    minimumOutAmount,\n    platformFee,\n  }: SwapParams) {\n    if (this.poolState.isV2) {\n      if (!this.poolState.curve) {\n        throw new Error('Unable to fetch curve account.');\n      }\n\n      return [\n        createAldrinV2SwapInstruction(\n          this.poolState,\n          sourceMint,\n          sourceTokenAccount,\n          destinationTokenAccount,\n          this.poolState.curve,\n          userTransferAuthority,\n          amount,\n          minimumOutAmount,\n          platformFee,\n        ),\n      ];\n    }\n\n    return [\n      createAldrinSwapInstruction(\n        this.poolState,\n        sourceMint,\n        sourceTokenAccount,\n        destinationTokenAccount,\n        userTransferAuthority,\n        amount,\n        minimumOutAmount,\n        platformFee,\n      ),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.baseTokenMint, this.poolState.quoteTokenMint];\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\n\n// TODO: Remove harcoded pools before merge\nconst TOKEN_SWAP_POOLS: PublicKey[] = [];\n\nexport const STEP_TOKEN_SWAP_PROGRAM_ID = new PublicKey('SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1');\n\nexport const PROGRAM_ID_TO_LABEL = new Map<string, string>([\n  ['9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP', 'Orca'],\n  [STEP_TOKEN_SWAP_PROGRAM_ID.toBase58(), 'Step'],\n  ['PSwapMdSai8tjrEXcxFeQth87xC4rRsa4VA5mhGhXkP', 'Penguin'],\n]);\n\nexport function getTokenSwapPools(cluster: string) {\n  return cluster === 'mainnet-beta' ? TOKEN_SWAP_POOLS : [];\n}\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { struct, u8, blob } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { publicKey, uint64 } from '../../utils/layout';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from './splTokenSwapPools';\n\ninterface TokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  bumpSeed: number;\n  tokenProgramId: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenPool: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  feeAccount: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  hostFeeNumerator: u64;\n  hostFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst TokenSwapLayout = struct<TokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  uint64('hostFeeNumerator'),\n  uint64('hostFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\ninterface StepTokenSwapLayout extends TokenSwapLayout {\n  poolNonce: u64;\n}\n\nconst StepTokenSwapLayout = struct<StepTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n  u8('poolNonce'),\n]);\n\nexport interface TokenSwapState {\n  address: PublicKey;\n  programId: PublicKey;\n  tokenProgramId: PublicKey;\n  poolToken: PublicKey;\n  feeAccount: PublicKey;\n  authority: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n  poolNonce?: u64;\n}\n\nexport function accountInfoToTokenSwapState(\n  address: PublicKey,\n  tokenSwapAccountInfo: AccountInfo<Buffer>,\n): TokenSwapState {\n  const programId = tokenSwapAccountInfo.owner;\n\n  // The layout difference only affects fields we do not actively use\n  const tokenSwapData = (\n    programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID)\n      ? StepTokenSwapLayout.decode(tokenSwapAccountInfo.data)\n      : TokenSwapLayout.decode(tokenSwapAccountInfo.data)\n  ) as TokenSwapLayout | StepTokenSwapLayout;\n\n  if (!tokenSwapData.isInitialized) {\n    throw new Error(`Invalid token swap state`);\n  }\n\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  const poolToken = new PublicKey(tokenSwapData.tokenPool);\n  const feeAccount = new PublicKey(tokenSwapData.feeAccount);\n  const tokenAccountA = new PublicKey(tokenSwapData.tokenAccountA);\n  const tokenAccountB = new PublicKey(tokenSwapData.tokenAccountB);\n  const mintA = new PublicKey(tokenSwapData.mintA);\n  const mintB = new PublicKey(tokenSwapData.mintB);\n  const tokenProgramId = new PublicKey(tokenSwapData.tokenProgramId);\n\n  const tradeFeeNumerator = tokenSwapData.tradeFeeNumerator;\n  const tradeFeeDenominator = tokenSwapData.tradeFeeDenominator;\n  const ownerTradeFeeNumerator = tokenSwapData.ownerTradeFeeNumerator;\n  const ownerTradeFeeDenominator = tokenSwapData.ownerTradeFeeDenominator;\n  const ownerWithdrawFeeNumerator = tokenSwapData.ownerWithdrawFeeNumerator;\n  const ownerWithdrawFeeDenominator = tokenSwapData.ownerWithdrawFeeDenominator;\n\n  const curveType = tokenSwapData.curveType;\n  const curveParameters = tokenSwapData.curveParameters;\n\n  const poolNonce = 'poolNonce' in tokenSwapData ? tokenSwapData.poolNonce : undefined;\n\n  return {\n    address,\n    programId,\n    tokenProgramId,\n    poolToken,\n    feeAccount,\n    authority,\n    tokenAccountA,\n    tokenAccountB,\n    mintA,\n    mintB,\n    tradeFeeNumerator,\n    tradeFeeDenominator,\n    ownerTradeFeeNumerator,\n    ownerTradeFeeDenominator,\n    ownerWithdrawFeeNumerator,\n    ownerWithdrawFeeDenominator,\n    curveType,\n    curveParameters,\n    poolNonce,\n  };\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createTokenSwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToTokenSwapState, TokenSwapState } from './tokenSwapLayout';\nimport { deserializeAccount } from '../../utils/deserializeAccount';\nimport { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { ZERO_FRACTION } from '../../constants';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from './splTokenSwapPools';\n\nenum CurveType {\n  ConstantProduct = 0,\n  Stable = 2,\n}\n\n// Abstract any SPL token swap based AMM\nexport class SplTokenSwapAmm implements Amm {\n  private tokenSwapState: TokenSwapState;\n  private curveType: CurveType;\n\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable | undefined;\n\n  constructor(address: PublicKey, swapStateAccountInfo: AccountInfo<Buffer>, public label: string) {\n    this.tokenSwapState = accountInfoToTokenSwapState(address, swapStateAccountInfo);\n\n    this.curveType = this.tokenSwapState.curveType;\n    if (!(this.curveType in CurveType)) {\n      throw new Error(`curveType ${this.tokenSwapState.curveType} is not supported`);\n    }\n  }\n\n  get id() {\n    return this.tokenSwapState.address.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.tokenSwapState.tokenAccountA, this.tokenSwapState.tokenAccountB];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n\n    if (this.tokenSwapState.curveType === CurveType.ConstantProduct) {\n      this.calculator = new TokenSwapConstantProduct(\n        this.tokenAccounts.map((tokenAccount) => {\n          return JSBI.BigInt(tokenAccount.amount.toString());\n        }),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    } else if (this.tokenSwapState.curveType === CurveType.Stable) {\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(this.tokenSwapState.curveParameters[0]),\n        this.tokenAccounts.map((tokenAccount) => {\n          return JSBI.BigInt(tokenAccount.amount.toString());\n        }),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    }\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    if (this.calculator === undefined) {\n      throw new Error('Unable to fetch accounts for Curve calculator.');\n    }\n\n    let feePct = new Decimal(this.tokenSwapState.tradeFeeNumerator.toString())\n      .div(this.tokenSwapState.tradeFeeDenominator.toString())\n      .add(\n        new Decimal(this.tokenSwapState.ownerTradeFeeNumerator.toString()).div(\n          this.tokenSwapState.ownerTradeFeeDenominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(JSBI.BigInt(amount), ZERO_FRACTION, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions({\n    sourceMint,\n    sourceTokenAccount,\n    destinationTokenAccount,\n    userTransferAuthority,\n    amount,\n    minimumOutAmount,\n    platformFee,\n  }: SwapParams) {\n    return [\n      createTokenSwapInstruction(\n        this.tokenSwapState,\n        sourceMint,\n        sourceTokenAccount,\n        destinationTokenAccount,\n        userTransferAuthority,\n        amount,\n        minimumOutAmount,\n        platformFee,\n        this.tokenSwapState.programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID),\n      ),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.tokenSwapState.mintA, this.tokenSwapState.mintB];\n  }\n}\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { struct, u8, u32 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { uint64, publicKey } from '../../utils/layout';\n\nexport const FEE_DENOMINATOR = Math.pow(10, 10);\n\ninterface MercurialSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  amplificationCoefficient: u64;\n  feeNumerator: u64;\n  adminFeeNumerator: u64;\n  tokenAccountsLength: number;\n  precisionFactor: u64;\n  precisionMultiplierA: u64;\n  precisionMultiplierB: u64;\n  precisionMultiplierC: u64;\n  precisionMultiplierD: u64;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenAccountC: PublicKey;\n  tokenAccountD: PublicKey;\n}\n\nexport const MercurialSwapLayout = struct<MercurialSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  uint64('amplificationCoefficient'),\n  uint64('feeNumerator'),\n  uint64('adminFeeNumerator'),\n  u32('tokenAccountsLength'),\n  uint64('precisionFactor'),\n  uint64('precisionMultiplierA'),\n  uint64('precisionMultiplierB'),\n  uint64('precisionMultiplierC'),\n  uint64('precisionMultiplierD'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenAccountC'),\n  publicKey('tokenAccountD'),\n]);\n\nexport interface MercurialSwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  amplificationCoefficient: number;\n  feeNumerator: number;\n  tokenAccountsLength: number;\n  precisionFactor: number;\n  precisionMultipliers: number[];\n  tokenAccounts: PublicKey[];\n}\n\nexport const accountInfoToMercurialSwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): MercurialSwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = MercurialSwapLayout.decode(accountInfo.data);\n  const tokenAccountsLength = decoded.tokenAccountsLength;\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  const precisionMultipliers = [\n    decoded.precisionMultiplierA.toNumber(),\n    decoded.precisionMultiplierB.toNumber(),\n    decoded.precisionMultiplierC.toNumber(),\n    decoded.precisionMultiplierD.toNumber(),\n  ].slice(0, tokenAccountsLength);\n\n  const tokenAccounts = [\n    decoded.tokenAccountA,\n    decoded.tokenAccountB,\n    decoded.tokenAccountC,\n    decoded.tokenAccountD,\n  ].slice(0, tokenAccountsLength);\n\n  return {\n    programId,\n    authority,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    amplificationCoefficient: decoded.amplificationCoefficient.toNumber(),\n    feeNumerator: decoded.feeNumerator.toNumber(),\n    tokenAccountsLength,\n    precisionFactor: decoded.precisionFactor.toNumber(),\n    precisionMultipliers,\n    tokenAccounts,\n  };\n};\n","import { Fraction, Stable } from '@jup-ag/math';\nimport { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createMercurialExchangeInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '../../utils/deserializeAccount';\nimport { ZERO_FRACTION } from '../../constants';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { accountInfoToMercurialSwapLayout, FEE_DENOMINATOR, MercurialSwapLayoutState } from './swapLayout';\n\ninterface MercurialParams {\n  tokenMints: string[];\n}\n\nexport class MercurialAmm implements Amm {\n  label = 'Mercurial';\n  swapLayout: MercurialSwapLayoutState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: Stable | undefined;\n\n  static decodeSwapLayout = accountInfoToMercurialSwapLayout;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: MercurialParams) {\n    this.swapLayout = accountInfoToMercurialSwapLayout(address, accountInfo);\n  }\n\n  get id() {\n    return this.swapLayout.ammId.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return this.swapLayout.tokenAccounts;\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos\n      .map((info) => deserializeAccount(info.data))\n      .filter((x): x is TokenAccountInfo => x !== null);\n\n    this.calculator = new Stable(\n      JSBI.BigInt(this.swapLayout.amplificationCoefficient),\n      this.tokenAccounts.map((tokenAccount) => {\n        return JSBI.BigInt(tokenAccount.amount.toString());\n      }),\n      this.swapLayout.precisionMultipliers.map((precisionMultiplier) => JSBI.BigInt(precisionMultiplier)),\n      new Fraction(JSBI.BigInt(this.swapLayout.feeNumerator), JSBI.BigInt(FEE_DENOMINATOR)),\n    );\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    if (this.calculator === undefined) {\n      throw new Error('Unable to fetch accounts for Curve calculator.');\n    }\n\n    const inputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(sourceMint));\n    const outputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(destinationMint));\n    const result = this.calculator.exchange(JSBI.BigInt(amount), ZERO_FRACTION, inputIndex, outputIndex);\n\n    const feePct = this.swapLayout.feeNumerator / FEE_DENOMINATOR;\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions({\n    sourceTokenAccount,\n    destinationTokenAccount,\n    userTransferAuthority,\n    amount,\n    minimumOutAmount,\n    platformFee,\n  }: SwapParams): TransactionInstruction[] {\n    return [\n      createMercurialExchangeInstruction(\n        this.swapLayout,\n        sourceTokenAccount,\n        destinationTokenAccount,\n        userTransferAuthority,\n        amount,\n        minimumOutAmount,\n        platformFee,\n      ),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return this.params.tokenMints.map((tokenMint) => new PublicKey(tokenMint));\n  }\n}\n","import { Fraction, TokenSwapConstantProduct } from '@jup-ag/math';\nimport { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '../../utils/deserializeAccount';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createCropperSwapInstruction } from '../jupiterInstruction';\n\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { ZERO_FRACTION } from '../../constants';\nimport {\n  accountInfoToCropperPoolState,\n  CropperPoolState,\n  stateAccountInfoToCropperState,\n  CROPPER_STATE_ADDRESS,\n} from './swapLayout';\nimport Decimal from 'decimal.js';\n\ninterface CropperParams {\n  tokenAFeeAccount: PublicKey;\n  tokenBFeeAccount: PublicKey;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n}\n\nexport class CropperAmm implements Amm {\n  label = 'Cropper' as const;\n  poolState: CropperPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: TokenSwapConstantProduct | undefined;\n  private feePct: Decimal;\n\n  // Hardcoded because no where to query this\n  static async getStateFromStateAccount(connection: Connection) {\n    const accountInfo = await connection.getAccountInfo(CROPPER_STATE_ADDRESS);\n\n    if (!accountInfo) {\n      throw new Error('State account not found');\n    }\n\n    return stateAccountInfoToCropperState(accountInfo);\n  }\n\n  static decodePoolState = accountInfoToCropperPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: CropperParams) {\n    this.poolState = accountInfoToCropperPoolState(address, accountInfo);\n\n    this.feePct = new Decimal(this.params.fixedFeeNumerator)\n      .div(this.params.feeDenominator)\n      .add(new Decimal(this.params.returnFeeNumerator).div(this.params.feeDenominator));\n\n    this.params.tokenAFeeAccount = new PublicKey(this.params.tokenAFeeAccount);\n    this.params.tokenBFeeAccount = new PublicKey(this.params.tokenBFeeAccount);\n  }\n\n  get id() {\n    return this.poolState.ammId.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.tokenAAccount, this.poolState.tokenBAccount];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n\n    this.calculator = new TokenSwapConstantProduct(\n      this.tokenAccounts.map((tokenAccount) => {\n        return JSBI.BigInt(tokenAccount.amount.toString());\n      }),\n      new Fraction(JSBI.BigInt(this.params.fixedFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n      new Fraction(JSBI.BigInt(this.params.returnFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n    );\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    if (this.calculator === undefined) {\n      throw new Error('Unable to fetch accounts for calculator.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(JSBI.BigInt(amount), ZERO_FRACTION, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions({\n    sourceMint,\n    sourceTokenAccount,\n    destinationTokenAccount,\n    userTransferAuthority,\n    amount,\n    minimumOutAmount,\n    platformFee,\n  }: SwapParams): TransactionInstruction[] {\n    const feeAccount = sourceMint.equals(this.poolState.mintA)\n      ? this.params.tokenAFeeAccount\n      : this.params.tokenBFeeAccount;\n\n    return [\n      createCropperSwapInstruction(\n        this.poolState,\n        sourceMint,\n        sourceTokenAccount,\n        destinationTokenAccount,\n        userTransferAuthority,\n        feeAccount,\n        amount,\n        minimumOutAmount,\n        platformFee,\n      ),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { struct, u8, Layout, blob } from '@solana/buffer-layout';\nimport { PublicKey, AccountInfo } from '@solana/web3.js';\nimport { u64 } from '@solana/spl-token';\nimport { publicKey, uint64 } from '../../utils/layout';\n\ninterface SenchaSwapLayout {\n  discriminator: any;\n  factory: PublicKey;\n  bump: number;\n  index: u64;\n  admin: PublicKey;\n  token0Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Reserves: PublicKey;\n  token1Mint: PublicKey;\n  token1Fees: PublicKey;\n  isPaused: number;\n  poolMint: PublicKey;\n  tradeFeeKbps: u64;\n  withdrawFeeKbps: u64;\n  adminTradeFeeKbps: u64;\n  adminWithdrawFeeKbps: u64;\n}\n\nexport const SenchaSwapLayout = struct<SenchaSwapLayout>([\n  blob(8, 'discriminator'),\n  publicKey('factory'),\n  u8('bump'),\n  uint64('index'),\n  publicKey('admin'),\n  publicKey('token0Reserves'),\n  publicKey('token0Mint'),\n  publicKey('token0Fees'),\n  publicKey('token1Reserves'),\n  publicKey('token1Mint'),\n  publicKey('token1Fees'),\n  u8('isPaused'),\n  publicKey('poolMint'),\n  uint64('tradeFeeKbps'),\n  uint64('withdrawFeeKbps'),\n  uint64('adminTradeFeeKbps'),\n  uint64('adminWithdrawFeeKbps'),\n]);\n\nexport interface SenchaPoolState {\n  programId: PublicKey;\n  isPaused: boolean;\n  bump: number;\n  ammId: PublicKey;\n  token0Reserves: PublicKey;\n  token1Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token1Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Fees: PublicKey;\n  poolMint: PublicKey;\n  tradeFeeKbps: number;\n}\n\nexport const accountInfoToSenchaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): SenchaPoolState => {\n  const programId = accountInfo.owner;\n  const decoded = SenchaSwapLayout.decode(accountInfo.data);\n\n  return {\n    programId,\n    isPaused: Boolean(decoded.isPaused),\n    bump: decoded.bump,\n    ammId: address,\n    token0Reserves: decoded.token0Reserves,\n    token1Reserves: decoded.token1Reserves,\n    token0Mint: decoded.token0Mint,\n    token1Mint: decoded.token1Mint,\n    token0Fees: decoded.token0Fees,\n    token1Fees: decoded.token1Fees,\n    poolMint: decoded.poolMint,\n    tradeFeeKbps: decoded.tradeFeeKbps.toNumber(),\n  };\n};\n","import { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { accountInfoToSenchaPoolState, SenchaPoolState } from './swapLayout';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { deserializeAccount } from '../../utils/deserializeAccount';\nimport { createSenchaSwapInstruction } from '../jupiterInstruction';\nimport { Fraction, TokenSwapConstantProduct, ZERO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport { ZERO_FRACTION } from '../../constants';\n\nexport class SenchaAmm implements Amm {\n  label = 'Sencha' as const;\n  poolState: SenchaPoolState;\n  private calculator: TokenSwapConstantProduct | undefined;\n  private tokenAccounts: TokenAccountInfo[] = [];\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.poolState = accountInfoToSenchaPoolState(address, accountInfo);\n  }\n\n  get id() {\n    return this.poolState.ammId.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.token0Reserves, this.poolState.token1Reserves];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n\n    this.calculator = new TokenSwapConstantProduct(\n      this.tokenAccounts.map((tokenAccount) => {\n        return JSBI.BigInt(tokenAccount.amount.toString());\n      }),\n      new Fraction(\n        JSBI.BigInt(this.poolState.tradeFeeKbps),\n        JSBI.BigInt(10000000), // 100% = 10000000kbps\n      ),\n      new Fraction(ZERO, ZERO),\n      false,\n    );\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    if (this.calculator === undefined) {\n      throw new Error('Unable to fetch accounts for Curve calculator.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(JSBI.BigInt(amount), ZERO_FRACTION, outputIndex);\n\n    let feePct = this.poolState.tradeFeeKbps / 10000000; // 100% kbps\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions({\n    sourceMint,\n    sourceTokenAccount,\n    destinationTokenAccount,\n    userTransferAuthority,\n    amount,\n    minimumOutAmount,\n    platformFee,\n  }: SwapParams): TransactionInstruction[] {\n    return [\n      createSenchaSwapInstruction(\n        this.poolState,\n        sourceMint,\n        sourceTokenAccount,\n        destinationTokenAccount,\n        userTransferAuthority,\n        amount,\n        minimumOutAmount,\n        platformFee,\n      ),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0Mint, this.poolState.token1Mint];\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport {\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  ALDRIN_SWAP_PROGRAM_ID,\n  DEVNET_SERUM_DEX_PROGRAM,\n  MAINNET_SERUM_DEX_PROGRAM,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  CROPPER_PROGRAM_ID,\n  SENCHA_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n} from '../constants';\nimport { Amm } from './amm';\nimport { SerumMarket, StableSwap } from './market';\nimport { SWAP_PROGRAM_ID as SABER_SWAP_PROGRAM_ID } from '@saberhq/stableswap-sdk';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { PROGRAM_ID_TO_LABEL } from './spl-token-swap/splTokenSwapPools';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\n\nexport function ammFactory(address: PublicKey, accountInfo: AccountInfo<Buffer>, params?: any): Amm | undefined {\n  const programId = new PublicKey(accountInfo.owner);\n\n  if (programId.equals(MAINNET_SERUM_DEX_PROGRAM) || programId.equals(DEVNET_SERUM_DEX_PROGRAM)) {\n    const decoded = SerumMarket.getLayout(programId).decode(accountInfo.data);\n    if (!decoded.accountFlags.initialized || !decoded.accountFlags.market) {\n      throw new Error('Invalid market');\n    }\n    const serumMarket = new SerumMarket(decoded, 0, 0, {}, programId);\n    return new SerumAmm(serumMarket);\n  } else if (programId.equals(RAYDIUM_AMM_V4_PROGRAM_ID)) {\n    const raydiumAmm = new RaydiumAmm(address, accountInfo);\n    if (raydiumAmm.status === 1) {\n      return raydiumAmm;\n    }\n  } else if (programId.equals(MERCURIAL_SWAP_PROGRAM_ID)) {\n    return new MercurialAmm(address, accountInfo, params);\n  } else if (programId.equals(SABER_SWAP_PROGRAM_ID)) {\n    const stableSwap = StableSwap.loadWithData(\n      address,\n      accountInfo.data,\n      findProgramAddressSync([address.toBuffer()], SABER_SWAP_PROGRAM_ID)[0],\n    );\n\n    return new SaberAmm(stableSwap);\n  } else if (programId.equals(ALDRIN_SWAP_PROGRAM_ID) || programId.equals(ALDRIN_SWAP_V2_PROGRAM_ID)) {\n    return new AldrinAmm(address, accountInfo, params);\n  } else if ([...PROGRAM_ID_TO_LABEL.keys()].includes(programId.toBase58())) {\n    const label = PROGRAM_ID_TO_LABEL.get(accountInfo.owner.toBase58()) ?? 'Unknown';\n    return new SplTokenSwapAmm(address, accountInfo, label);\n  } else if (programId.equals(CROPPER_PROGRAM_ID)) {\n    return new CropperAmm(address, accountInfo, params);\n  } else if (programId.equals(SENCHA_PROGRAM_ID)) {\n    return new SenchaAmm(address, accountInfo);\n  }\n  // Not supported by frontend\n  return;\n}\n","import { AccountInfo, Cluster, Connection, PublicKey } from '@solana/web3.js';\nimport { isValidRoute, MarketInfo } from './market';\nimport { MARKETS_URL, WRAPPED_SOL_MINT } from '../constants';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport fetch from 'cross-fetch';\nimport { MarketMeta, TokenRouteSegments } from './types';\nimport { Amm } from './amm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { ammFactory } from './ammFactory';\nimport { getTokenSwapPools } from './spl-token-swap/splTokenSwapPools';\nimport { getSaberWrappedDecimalsAmms, SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { getTwoPermutations } from '../utils/getTwoPermutations';\n\nexport interface TransactionFeeInfo {\n  signatureFee: number;\n  openOrdersDeposits: number[];\n  ataDeposit: number;\n  ataDepositLength: number;\n}\n\nexport interface RouteInfo {\n  marketInfos: MarketInfo[];\n  inAmount: number;\n  outAmount: number;\n  outAmountWithSlippage: number;\n  priceImpactPct: number;\n  getDepositAndFee: () => Promise<TransactionFeeInfo | undefined>;\n}\n\ntype MarketsCache = Array<\n  Omit<AccountInfo<Buffer>, 'data' | 'owner'> & {\n    data: [string, 'base64'];\n    owner: string;\n    pubkey: string;\n  }\n>;\n\ntype KeyedAccountInfo = AccountInfo<Buffer> & {\n  pubkey: PublicKey;\n  // api can pass some extra params\n  params?: any;\n};\n\nexport async function getAllAmms(connection: Connection, cluster: Cluster, marketUrl?: string): Promise<Amm[]> {\n  const marketsCache = (await (await fetch(marketUrl || MARKETS_URL[cluster])).json()) as MarketsCache;\n\n  const marketCacheToAccountInfo = (marketsCache: MarketsCache): Array<KeyedAccountInfo> => {\n    return marketsCache.map((market) => {\n      const {\n        data: [accountInfo, format],\n        pubkey,\n        ...rest\n      } = market;\n      return {\n        ...rest,\n        pubkey: new PublicKey(pubkey),\n        data: Buffer.from(accountInfo, format),\n        owner: new PublicKey(rest.owner),\n      };\n    });\n  };\n\n  // We add market accounts infos that do not come from the API yet\n  // TODO: Move to market cache\n  const tokenSwapPools = getTokenSwapPools(cluster);\n\n  const extraKeys = tokenSwapPools;\n  const extraMarketKeyedAccountInfos = (await connection.getMultipleAccountsInfo(extraKeys)).reduce(\n    (acc, accountInfo, index) => {\n      if (accountInfo) {\n        acc.push({\n          ...accountInfo,\n          pubkey: extraKeys[index],\n        });\n      }\n      return acc;\n    },\n    new Array<KeyedAccountInfo>(),\n  );\n\n  const marketKeyedAccountInfos = marketCacheToAccountInfo(marketsCache).concat(extraMarketKeyedAccountInfos);\n\n  const amms = marketKeyedAccountInfos.reduce((acc, keyedAccountInfo) => {\n    const amm = ammFactory(keyedAccountInfo.pubkey, keyedAccountInfo, keyedAccountInfo.params);\n    // Amm might not be recognized by the current version of the frontend\n    // or be in a state we don't want\n    if (amm) {\n      acc.push(amm);\n    }\n    return acc;\n  }, new Array<Amm>());\n\n  const naturalAmms = amms.slice();\n  amms.push(...getSaberWrappedDecimalsAmms());\n\n  // Add the split trade Amms\n  // This is very inefficient and slow\n  ammCrossProtocolPairs(naturalAmms, (firstAmm, secondAmm) => {\n    const splitTradeAmm = SplitTradeAmm.create(firstAmm, secondAmm);\n    if (splitTradeAmm) {\n      amms.push(splitTradeAmm);\n    }\n  });\n\n  return amms;\n}\n\nfunction ammCrossProtocolPairs(arr: Amm[], func: (a: Amm, b: Amm) => void) {\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i; j < arr.length - 1; j++) {\n      // Don't pair amm with same label\n      if (arr[i].label !== arr[j].label) {\n        func(arr[i], arr[j + 1]);\n      }\n    }\n  }\n}\n\nexport function getTokenRouteSegments(amms: Amm[]): TokenRouteSegments {\n  const tokenRouteSegments = new Map<string, Map<string, MarketMeta[]>>();\n\n  amms.forEach((amm) => {\n    const reserveTokenMintPermutations = getTwoPermutations(amm.reserveTokenMints);\n    reserveTokenMintPermutations.forEach(([firstReserveMint, secondReserveMint]) => {\n      addSegment(firstReserveMint.toBase58(), secondReserveMint.toBase58(), amm, tokenRouteSegments);\n    });\n  });\n\n  return tokenRouteSegments;\n}\n\nfunction addSegment(inMint: string, outMint: string, amm: Amm, tokenRouteSegments: TokenRouteSegments) {\n  let segments = tokenRouteSegments.get(inMint);\n\n  if (!segments) {\n    segments = new Map<string, MarketMeta[]>([[outMint, []]]);\n    tokenRouteSegments.set(inMint, segments);\n  }\n\n  let marketMetas = segments.get(outMint);\n  if (!marketMetas) {\n    marketMetas = [];\n    segments.set(outMint, marketMetas);\n  }\n\n  marketMetas.push({ amm });\n}\n\nexport type Route = {\n  marketMetas: MarketMeta[];\n  intermediateMint?: PublicKey;\n};\n\nexport function computeRoutes(\n  inputMint: PublicKey,\n  outputMint: PublicKey,\n  tokenRouteSegments: TokenRouteSegments,\n): Route[] {\n  const routes: Route[] = [];\n  const firstSegment = tokenRouteSegments?.get(inputMint.toBase58());\n\n  const simpleRoutes = firstSegment?.get(outputMint.toBase58()) ?? [];\n\n  // Direct trade\n  simpleRoutes.forEach((simpleRoute) => {\n    // dont do direct decimal saber\n    if (!(simpleRoute.amm instanceof SaberAddDecimalsAmm)) {\n      routes.push({ marketMetas: [simpleRoute] });\n    }\n  });\n\n  const secondSegment = tokenRouteSegments?.get(outputMint.toBase58());\n\n  for (const [mint, marketMetas] of firstSegment?.entries() ?? []) {\n    const intersectionMarketMetas = secondSegment?.get(mint) ?? [];\n    for (const marketMeta of marketMetas) {\n      for (const intersectionMarketMeta of intersectionMarketMetas) {\n        if (isValidRoute(marketMeta.amm, intersectionMarketMeta.amm)) {\n          routes.push({\n            marketMetas: [marketMeta, intersectionMarketMeta],\n            intermediateMint: new PublicKey(mint),\n          });\n        }\n      }\n    }\n  }\n\n  return routes;\n}\n\nexport function computeRouteMap(tokenRouteSegments: TokenRouteSegments): Map<string, string[]> {\n  const routeMap = new Map<string, string[]>();\n\n  for (const [tokenMint, firstLevelOutputs] of tokenRouteSegments) {\n    const validOutputMints = new Set<string>();\n\n    for (const [firstLevelOutputMint, firstLevelMarketMetas] of firstLevelOutputs) {\n      validOutputMints.add(firstLevelOutputMint);\n\n      // add the single level output as possible valid mints as well\n      const secondLevelOutputs = tokenRouteSegments.get(firstLevelOutputMint) ?? [];\n      for (const [secondLevelOutputMint, secondLevelMarketMetas] of secondLevelOutputs) {\n        // Prevent output mint == input mint when routing\n        if (secondLevelOutputMint === tokenMint) {\n          continue;\n        }\n\n        for (const firstLevelMarketMeta of firstLevelMarketMetas) {\n          for (const secondLevelMarketMeta of secondLevelMarketMetas) {\n            if (isValidRoute(firstLevelMarketMeta.amm, secondLevelMarketMeta.amm)) {\n              validOutputMints.add(secondLevelOutputMint);\n              break;\n            }\n          }\n        }\n      }\n    }\n    routeMap.set(tokenMint, Array.from(validOutputMints));\n  }\n\n  return routeMap;\n}\n\nexport function isSplitSetupRequired(marketInfos: MarketInfo[]): boolean {\n  if (marketInfos.length === 1) {\n    const amm = marketInfos[0].marketMeta.amm;\n    if (amm instanceof SplitTradeAmm && amm.shouldSplitSetup) {\n      return true;\n    }\n  } else {\n    const [firstMarket, secondMarket] = marketInfos.map((marketInfo) => marketInfo.marketMeta.amm);\n\n    if (firstMarket instanceof RaydiumAmm || secondMarket instanceof RaydiumAmm) {\n      return true;\n    } else if (firstMarket instanceof SerumAmm && secondMarket instanceof SerumAmm) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function getNumberOfTransactionForRoute(marketInfos: MarketInfo[]): number {\n  if (isSplitSetupRequired(marketInfos)) {\n    const [firstMarketInfo, secondMarketInfo] = marketInfos;\n\n    const hasSOL = [(firstMarketInfo.inputMint, firstMarketInfo.outputMint, secondMarketInfo.outputMint)].some((item) =>\n      item.equals(WRAPPED_SOL_MINT),\n    );\n\n    return hasSOL ? 3 : 2;\n  }\n  return 1;\n}\n\n// We cannot add platform fee to all possible routing due to transaction size limit\nexport function isPlatformFeeSupported(marketInfos: MarketMeta[]): boolean {\n  if (marketInfos.length > 1) {\n    const [firstMarket, secondMarket] = marketInfos.map((marketInfo) => marketInfo.amm);\n\n    if (firstMarket instanceof RaydiumAmm && secondMarket instanceof RaydiumAmm) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getRouteInfoUniqueId(routeInfo: RouteInfo) {\n  return routeInfo.marketInfos.map((marketInfo) => `${marketInfo.marketMeta.amm.id}-${marketInfo.inputMint}`).join('-');\n}\n","import { InstructionCache } from './types';\nimport { RouteInfo } from './routes';\nimport { SetupInstructions } from '..';\n\nexport const getCacheMintKey = (marketInfos: RouteInfo['marketInfos']) => {\n  return `${marketInfos[0]?.inputMint}-${marketInfos[0]?.outputMint}-${marketInfos[1]?.outputMint}-${marketInfos.map(\n    (item) => item.marketMeta.amm.id,\n  )}`;\n};\n\nexport const getInstructionCache = ({\n  instructionCache,\n  walletPublicKey,\n  cacheKey,\n}: {\n  instructionCache: InstructionCache;\n  walletPublicKey: string;\n  cacheKey: string;\n}) => {\n  return instructionCache.get(walletPublicKey)?.get(cacheKey);\n};\n\nexport const setInstructionCache = ({\n  instructionCache,\n  instructionResult,\n  walletPublicKey,\n  cacheKey,\n}: {\n  instructionCache: InstructionCache;\n  instructionResult: SetupInstructions;\n  walletPublicKey: string;\n  cacheKey: string;\n}) => {\n  const walletCache =\n    instructionCache.get(walletPublicKey) || (new Map() as NonNullable<ReturnType<InstructionCache['get']>>);\n\n  walletCache.set(cacheKey, instructionResult);\n\n  instructionCache.set(walletPublicKey, walletCache);\n};\n\nexport const deleteInstructionCache = ({\n  instructionCache,\n  walletPublicKey,\n}: {\n  instructionCache: InstructionCache;\n  walletPublicKey: string;\n}) => {\n  instructionCache.get(walletPublicKey)?.clear();\n};\n","import { Signer, Transaction, TransactionInstruction, TransactionSignature } from '@solana/web3.js';\n\nexport const getEmptyInstruction: () => Instruction = () => ({\n  instructions: [],\n  cleanupInstructions: [],\n  signers: [],\n});\n\nexport type Instruction = {\n  instructions: TransactionInstruction[];\n  cleanupInstructions: TransactionInstruction[];\n  signers: Signer[];\n};\n\nexport type TransactionPayload = {\n  transaction: Transaction;\n  signers: Signer[];\n  execute: () => Promise<TransactionSignature>;\n};\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { getEmptyInstruction, Instruction } from './instruction';\n\n// Leverage the existing ATA when present\nexport async function createAndCloseWSOLAccount(\n  connection: Connection,\n  owner: PublicKey,\n  amount: number,\n): Promise<Instruction & { address: PublicKey }> {\n  const result = getEmptyInstruction();\n  result.instructions = [];\n\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    WRAPPED_SOL_MINT,\n    owner,\n  );\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    result.instructions.push(\n      Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        WRAPPED_SOL_MINT,\n        toAccount,\n        owner,\n        owner,\n      ),\n    );\n  }\n\n  // Fund account and sync\n  result.instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: owner,\n      toPubkey: toAccount,\n      lamports: amount,\n    }),\n  );\n  result.instructions.push(\n    // This is not exposed by the types, but indeed it exists\n    (Token as any).createSyncNativeInstruction(TOKEN_PROGRAM_ID, toAccount),\n  );\n\n  result.cleanupInstructions = [Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, owner, owner, [])];\n\n  return {\n    address: toAccount,\n    ...result,\n  };\n}\n\nexport async function findOrCreateAssociatedAccountByMint(\n  connection: Connection,\n  payer: PublicKey,\n  owner: PublicKey,\n  mintAddress: PublicKey | string,\n  unwrapSOL: boolean,\n): Promise<Instruction & { address: PublicKey }> {\n  const mint = typeof mintAddress === 'string' ? new PublicKey(mintAddress) : mintAddress;\n  const toAccount = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, mint, owner);\n  const cleanupInstructions: TransactionInstruction[] = [];\n  const instructions: TransactionInstruction[] = [];\n\n  const info = await connection.getAccountInfo(toAccount);\n  if (info === null) {\n    instructions.push(\n      Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mint,\n        toAccount,\n        owner,\n        payer,\n      ),\n    );\n  }\n\n  // We close it when wrapped SOL\n  if (mint.equals(WRAPPED_SOL_MINT) && unwrapSOL) {\n    cleanupInstructions.push(Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, owner, owner, []));\n  }\n\n  return {\n    address: toAccount,\n    instructions: instructions,\n    cleanupInstructions,\n    signers: [],\n  };\n}\n","import { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { isPlatformFeeSupported, RouteInfo } from './routes';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { findOrCreateAssociatedAccountByMint } from '../utils/token';\nimport { createSetTokenLedgerInstruction } from './jupiterInstruction';\nimport { Owner } from '../utils/Owner';\nimport { PlatformFee } from './types';\nimport { QuoteMintToReferrer } from '..';\n\nasync function routeToInstructions(\n  user: Owner,\n  openOrdersAddresses: (PublicKey | undefined)[],\n  userSourceTokenAccountAddress: PublicKey,\n  userIntermediaryTokenAccountAddress: PublicKey | undefined,\n  userDestinationTokenAccountAddress: PublicKey,\n  routeInfo: RouteInfo,\n  platformFee: PlatformFee | undefined,\n  quoteMintToReferrer: QuoteMintToReferrer,\n): Promise<Instruction> {\n  const outAmountWithSlippage = routeInfo.outAmountWithSlippage;\n  const inputAmount = routeInfo.inAmount;\n\n  const legs = routeInfo.marketInfos.length;\n  if (legs == 2 && !userIntermediaryTokenAccountAddress) {\n    throw new Error('Missing intermediary token account');\n  }\n\n  const userTokenAccountAddresses =\n    legs === 1\n      ? [userSourceTokenAccountAddress, userDestinationTokenAccountAddress]\n      : [userSourceTokenAccountAddress, userIntermediaryTokenAccountAddress!, userDestinationTokenAccountAddress];\n\n  let instructions: TransactionInstruction[] = [];\n\n  const platformFeeSupported = isPlatformFeeSupported(routeInfo.marketInfos.map((mi) => mi.marketMeta));\n\n  if (legs > 1) {\n    instructions.push(createSetTokenLedgerInstruction(userIntermediaryTokenAccountAddress!));\n  }\n\n  for (const [index, marketInfo] of routeInfo.marketInfos.entries()) {\n    const amm = marketInfo.marketMeta.amm;\n    const legInputAmount = index === 0 ? inputAmount : null;\n    const legOutAmountWithSlippage = index === legs - 1 ? outAmountWithSlippage : 0;\n    const legPlatformFee = index === legs - 1 && platformFeeSupported ? platformFee : undefined;\n\n    const [source, destination] = userTokenAccountAddresses.slice(index);\n\n    instructions.push(\n      ...amm.createSwapInstructions({\n        sourceMint: marketInfo.inputMint,\n        destinationMint: marketInfo.outputMint,\n        sourceTokenAccount: source,\n        destinationTokenAccount: destination,\n        userTransferAuthority: user.publicKey,\n        amount: legInputAmount,\n        minimumOutAmount: legOutAmountWithSlippage,\n        openOrdersAddress: openOrdersAddresses[index],\n        platformFee: legPlatformFee,\n        quoteMintToReferrer,\n      }),\n    );\n  }\n\n  const { signers, cleanupInstructions } = getEmptyInstruction();\n\n  if (user.isKeyPair && user.signer) {\n    signers.push(user.signer);\n  }\n  return {\n    signers,\n    cleanupInstructions,\n    instructions,\n  };\n}\n\nexport const routeAtaInstructions = async (\n  connection: Connection,\n  marketInfos: RouteInfo['marketInfos'],\n  userPublicKey: PublicKey,\n  unwrapSOL: boolean,\n) => {\n  const getUserIntermediateTokenAccountAddress = async () => {\n    const userIntermediateTokenAccountAddress =\n      marketInfos.length === 2\n        ? await findOrCreateAssociatedAccountByMint(\n            connection,\n            userPublicKey,\n            userPublicKey,\n            marketInfos[0].outputMint,\n            unwrapSOL,\n          )\n        : undefined;\n    return userIntermediateTokenAccountAddress;\n  };\n\n  const getUserDestinationTokenAccountAddress = async () => {\n    return await findOrCreateAssociatedAccountByMint(\n      connection,\n      userPublicKey,\n      userPublicKey,\n      marketInfos.length === 2 ? marketInfos[1].outputMint : marketInfos[0].outputMint,\n      unwrapSOL,\n    );\n  };\n\n  const [userIntermediaryTokenAccountResult, userDestinationTokenAccountResult] = await Promise.all([\n    getUserIntermediateTokenAccountAddress(),\n    getUserDestinationTokenAccountAddress(),\n  ]);\n\n  return {\n    userIntermediaryTokenAccountResult,\n    userDestinationTokenAccountResult,\n  };\n};\n\nexport default routeToInstructions;\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { SerumMarket } from '../market';\nimport { getEmptyInstruction, Instruction } from '../../utils/instruction';\nimport { wait } from '../../utils/wait';\nimport { createOpenOrdersInstruction } from '../jupiterInstruction';\n\nexport type MarketToOpenOrdersAddress = Map<string, PublicKey>;\n\nexport async function getOrCreateOpenOrdersAddress(\n  connection: Connection,\n  user: PublicKey,\n  serumMarket: SerumMarket,\n  marketToOpenOrdersAddress?: MarketToOpenOrdersAddress,\n): Promise<(Instruction & { address: PublicKey }) | undefined> {\n  const result = getEmptyInstruction();\n\n  const marketAddress = serumMarket.address.toString();\n\n  if (marketToOpenOrdersAddress) {\n    // check existing map\n    let openOrdersAddress = marketToOpenOrdersAddress.get(marketAddress);\n\n    if (openOrdersAddress) {\n      let openOrdersAccountInfo = null;\n\n      // We verify if it indeed exists, with low commitment to pick it up, to address the unsafe behaviour below\n      openOrdersAccountInfo = await connection.getAccountInfo(openOrdersAddress, 'processed');\n\n      if (openOrdersAccountInfo) {\n        return {\n          ...result,\n          address: openOrdersAddress,\n        };\n      }\n    }\n  }\n\n  const [newOpenOrdersAddress, ix] = createOpenOrdersInstruction(serumMarket, user);\n\n  const newOpenOrdersAddressInfo = await connection.getAccountInfo(newOpenOrdersAddress);\n\n  if (!newOpenOrdersAddressInfo) {\n    result.instructions = [ix];\n  }\n\n  // This is unsafe, since we don't know yet if it has succeeded\n  marketToOpenOrdersAddress?.set(serumMarket.address.toString(), newOpenOrdersAddress);\n\n  return {\n    ...result,\n    address: newOpenOrdersAddress,\n  };\n}\n","import { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, FeeCalculator, PublicKey } from '@solana/web3.js';\nimport type { SerumOpenOrdersMap } from '..';\nimport { deserializeAccount } from '../utils/deserializeAccount';\nimport { getCacheMintKey, getInstructionCache, setInstructionCache } from './cache';\nimport { RouteInfo, TransactionFeeInfo } from './routes';\nimport { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { InstructionCache, PlatformFeeAndAccounts, SetupInstructions } from './types';\n\nconst calculateTransactionDepositAndFee = ({\n  intermediate,\n  destination,\n  openOrders,\n  feeCalculator,\n}: SetupInstructions & {\n  feeCalculator: FeeCalculator;\n}): TransactionFeeInfo => {\n  const SERUM_OPEN_ACCOUNT_LAMPORTS = 23352760;\n  const OPEN_TOKEN_ACCOUNT_LAMPORTS = 2039280;\n  const openOrdersDeposits = openOrders\n    .filter((ooi) => ooi && ooi.instructions.length > 0)\n    .map(() => SERUM_OPEN_ACCOUNT_LAMPORTS);\n  const ataDepositLength = [destination, intermediate].filter(\n    (item) => item?.instructions.length && item.cleanupInstructions.length === 0,\n  ).length;\n  const ataDeposit = ataDepositLength * OPEN_TOKEN_ACCOUNT_LAMPORTS;\n\n  return {\n    signatureFee:\n      ([destination.signers, intermediate?.signers, openOrders?.some((oo) => oo?.signers)].filter(Boolean).flat()\n        .length +\n        1) *\n      feeCalculator.lamportsPerSignature,\n    openOrdersDeposits,\n    ataDeposit,\n    ataDepositLength: ataDepositLength,\n  };\n};\n\nexport const getDepositAndFeeFromInstructions = async ({\n  connection,\n  marketInfos,\n  userPublicKey,\n  feeCalculator,\n  instructionCache,\n  serumOpenOrdersPromise,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  userPublicKey: PublicKey;\n  feeCalculator: FeeCalculator;\n  marketInfos: RouteInfo['marketInfos'];\n  instructionCache: InstructionCache;\n  /* promise because we can choose not to await it when we dont need it */\n  serumOpenOrdersPromise: Promise<SerumOpenOrdersMap>;\n  unwrapSOL: boolean;\n}) => {\n  const cacheKey = getCacheMintKey(marketInfos);\n\n  const walletPublicKey = userPublicKey.toBase58();\n\n  const routeCache = getInstructionCache({\n    instructionCache,\n    walletPublicKey,\n    cacheKey,\n  });\n\n  if (routeCache) {\n    const { destination, intermediate, openOrders } = routeCache;\n    return calculateTransactionDepositAndFee({\n      intermediate,\n      destination,\n      openOrders,\n      feeCalculator,\n    });\n  }\n\n  const openOrdersInstructionsPromise = Promise.all(\n    marketInfos.map(async (marketInfo) => {\n      const amm = marketInfo.marketMeta.amm;\n      if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n        if (!amm.market) return;\n        return await getOrCreateOpenOrdersAddress(connection, userPublicKey, amm.market, await serumOpenOrdersPromise);\n      }\n      return;\n    }),\n  );\n\n  const promise = routeAtaInstructions(connection, marketInfos, userPublicKey, unwrapSOL).then(\n    ({ userIntermediaryTokenAccountResult, userDestinationTokenAccountResult }) => {\n      return openOrdersInstructionsPromise.then((openOrdersInstructions) => ({\n        intermediate: userIntermediaryTokenAccountResult,\n        destination: userDestinationTokenAccountResult,\n        openOrders: openOrdersInstructions,\n      }));\n    },\n  );\n\n  const instructionResult = await promise;\n\n  setInstructionCache({\n    cacheKey,\n    instructionCache,\n    instructionResult,\n    walletPublicKey,\n  });\n\n  return calculateTransactionDepositAndFee({\n    ...instructionResult,\n    feeCalculator,\n  });\n};\n\nexport const NO_PLATFORM_FEE: PlatformFeeAndAccounts = {\n  feeBps: 0,\n  feeAccounts: new Map<string, PublicKey>(),\n};\n\nexport async function getPlatformFeeAccounts(\n  connection: Connection,\n  feeAccountOwner: PublicKey,\n): Promise<Map<string, PublicKey>> {\n  const tokenAccounts = (\n    await connection.getTokenAccountsByOwner(feeAccountOwner, {\n      programId: TOKEN_PROGRAM_ID,\n    })\n  ).value;\n\n  const feeAccounts = tokenAccounts.reduce((acc, tokenAccount) => {\n    const deserializedtokenAccount = deserializeAccount(tokenAccount.account.data);\n    if (deserializedtokenAccount) {\n      acc.set(deserializedtokenAccount.mint.toBase58(), tokenAccount.pubkey);\n    }\n    return acc;\n  }, new Map<string, PublicKey>());\n\n  return feeAccounts;\n}\n","import {\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionCtorFields,\n  Signer,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { Instruction, TransactionPayload } from './instruction';\nimport { Owner } from './Owner';\n\nexport class TransactionBuilder {\n  private connection: Connection;\n  private feePayer: PublicKey;\n  private instructions: Instruction[];\n  private owner: Owner;\n\n  constructor(connection: Connection, feePayer: PublicKey, owner: Owner) {\n    this.connection = connection;\n    this.feePayer = feePayer;\n    this.instructions = [];\n    this.owner = owner;\n  }\n\n  addInstruction(instruction: Instruction): TransactionBuilder {\n    this.instructions.push(instruction);\n    return this;\n  }\n\n  async build(recentBlockHash?: string): Promise<TransactionPayload> {\n    if (!recentBlockHash) {\n      recentBlockHash = (await this.connection.getRecentBlockhash('singleGossip')).blockhash;\n    }\n\n    const txFields: TransactionCtorFields = {\n      recentBlockhash: recentBlockHash,\n      feePayer: this.feePayer,\n    };\n\n    let instructions: TransactionInstruction[] = [];\n    let cleanupInstructions: TransactionInstruction[] = [];\n    let signers: Signer[] = [];\n    this.instructions.forEach((curr) => {\n      instructions = instructions.concat(curr.instructions);\n      cleanupInstructions = cleanupInstructions.concat(curr.cleanupInstructions);\n      signers = signers.concat(curr.signers);\n    });\n\n    const transaction = new Transaction(txFields);\n    instructions.concat(cleanupInstructions).forEach((ix) => transaction.add(ix));\n    transaction.feePayer = this.feePayer;\n\n    return {\n      transaction: transaction,\n      signers: signers,\n      execute: this.owner.isKeyPair\n        ? () => {\n            return this.connection.sendTransaction(transaction, signers);\n          }\n        : async () => {\n            throw new Error('Please use a Keypair for the owner parameter to enable the execute function');\n          },\n    };\n  }\n}\n","import { Keypair, PublicKey, Signer } from '@solana/web3.js';\n\ntype _Owner = Keypair | PublicKey;\n\nexport class Owner {\n  private readonly _owner: _Owner;\n\n  constructor(owner: _Owner) {\n    this._owner = owner;\n  }\n\n  get publicKey(): PublicKey {\n    if (Owner.isKeyPair(this._owner)) {\n      return this._owner.publicKey;\n    }\n\n    return this._owner;\n  }\n\n  get signer(): Signer | undefined {\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\n  }\n\n  get isKeyPair(): boolean {\n    return Owner.isKeyPair(this._owner);\n  }\n\n  get isPublicKey(): boolean {\n    return Owner.isPublicKey(this._owner);\n  }\n\n  static isKeyPair(owner: _Owner): owner is Keypair {\n    return (owner as Keypair).secretKey !== undefined;\n  }\n\n  static isPublicKey(owner: _Owner): owner is PublicKey {\n    return !Owner.isKeyPair(owner);\n  }\n}\n","export class TransactionError extends Error {\n  constructor(m: string) {\n    super(m);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Error.prototype);\n  }\n\n  // transaction id\n  txid?: string;\n}\n","import {\n  ConfirmedTransactionMeta,\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionResponse,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport promiseRetry from 'promise-retry';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { TransactionError } from '../lib/error';\n\nfunction diffTokenBalance(accountKeyIndex: number, meta: ConfirmedTransactionMeta): number | undefined {\n  const postBalance = meta.postTokenBalances?.find(\n    (postTokenBalance) => postTokenBalance.accountIndex === accountKeyIndex,\n  )?.uiTokenAmount.amount;\n  const preBalance = meta.preTokenBalances?.find((preTokenBalance) => preTokenBalance.accountIndex === accountKeyIndex)\n    ?.uiTokenAmount.amount;\n\n  // When token account is created it isn't present in preBalance\n  if (!postBalance) return;\n  return Math.abs(parseInt(postBalance) - (preBalance !== undefined ? parseInt(preBalance) : 0));\n}\n\nexport function extractTokenBalanceChangeFromTransaction(\n  transactionResult: TransactionResponse,\n  tokenAccountAddress: PublicKey,\n): number | undefined {\n  const message = transactionResult.transaction.message;\n  const meta = transactionResult.meta;\n  if (!meta) {\n    return;\n  }\n  const index = message.accountKeys.findIndex((p) => p.equals(tokenAccountAddress));\n\n  return diffTokenBalance(index, meta);\n}\n\nexport function extractWrappedSOLChangeFromTransaction(transactionResult: TransactionResponse): number | undefined {\n  const meta = transactionResult.meta;\n  if (!meta) {\n    return;\n  }\n  const index = meta.preTokenBalances?.find(\n    (preTokenBalance) => preTokenBalance.mint === WRAPPED_SOL_MINT.toString(),\n  )?.accountIndex;\n\n  if (!index) return;\n\n  return diffTokenBalance(index, meta);\n}\n\nexport function extractSOLChangeFromTransaction(transactionResult: TransactionResponse): number | undefined {\n  const meta = transactionResult.meta;\n  if (!meta) {\n    return;\n  }\n  const index = meta.postTokenBalances?.find(\n    (postTokenBalance) => postTokenBalance.mint === WRAPPED_SOL_MINT.toString(),\n  )?.accountIndex;\n\n  if (!index) return;\n\n  return diffTokenBalance(index, meta);\n}\n\nexport function getWritableKeys(transaction: Transaction) {\n  return [\n    ...new Set(\n      transaction.instructions\n        .map((inst) => inst.keys.filter((key) => key.isWritable).map((k) => k.pubkey))\n        .reduce((acc, el) => acc.concat(el)),\n    ).values(),\n  ];\n}\n\nexport function getTokenBalanceChangesFromTransactionResponse(\n  inputMint: PublicKey,\n  outputMint: PublicKey,\n  sourceAddress: PublicKey,\n  destinationAddress: PublicKey,\n  transactionResponse: TransactionResponse | null,\n) {\n  let sourceTokenBalanceChange: number | undefined;\n  let destinationTokenBalanceChange: number | undefined;\n\n  if (transactionResponse) {\n    sourceTokenBalanceChange =\n      inputMint.toBase58() === WRAPPED_SOL_MINT.toString()\n        ? extractWrappedSOLChangeFromTransaction(transactionResponse)\n        : extractTokenBalanceChangeFromTransaction(transactionResponse, sourceAddress);\n    destinationTokenBalanceChange =\n      outputMint.toBase58() === WRAPPED_SOL_MINT.toString()\n        ? extractSOLChangeFromTransaction(transactionResponse)\n        : extractTokenBalanceChangeFromTransaction(transactionResponse, destinationAddress);\n  }\n\n  if (!(sourceTokenBalanceChange && destinationTokenBalanceChange)) {\n    throw new Error('Cannot find source or destination token account balance change');\n  }\n\n  return [sourceTokenBalanceChange, destinationTokenBalanceChange];\n}\n\nexport function getConfirmTransaction(connection: Connection, txid: TransactionSignature) {\n  return promiseRetry(\n    async (retry) => {\n      const txResult = await connection.getTransaction(txid, {\n        commitment: 'confirmed',\n      });\n      if (!txResult) {\n        const error = new TransactionError('Transaction was not confirmed');\n        error.txid = txid;\n\n        retry(error);\n        return txResult;\n      }\n      return txResult;\n    },\n    {\n      retries: 30,\n      minTimeout: 500,\n    },\n  );\n}\n","export function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(0, new Array(Math.ceil(array.length / size))).map((_, index) =>\n    array.slice(index * size, (index + 1) * size),\n  );\n}\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { chunks } from './chunks';\n\nexport async function chunkedGetMultipleAccountInfos(\n  connection: Connection,\n  pks: PublicKey[],\n  chunkSize: number = 100,\n) {\n  return (await Promise.all(chunks(pks, chunkSize).map((chunk) => connection.getMultipleAccountsInfo(chunk)))).flat();\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport { MarketInfo } from './market';\nimport { isPlatformFeeSupported, Route, RouteInfo, TransactionFeeInfo } from './routes';\n\nconst PLATFORM_FEE_DENOMINATOR = 10000;\n\nexport async function fetchRoutes(\n  connection: Connection,\n  routes: Route[],\n  extraAccountInfosMap?: Map<string, AccountInfo<Buffer>>,\n): Promise<Route[]> {\n  await routeBatchFetcher(connection, routes, extraAccountInfosMap);\n\n  return routes;\n}\n\ninterface GetQuotesParams {\n  routes: Route[];\n  amount: number;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  platformFeeBps: number;\n  slippage: number;\n  getDepositAndFeeForRoute: (marketInfos: RouteInfo['marketInfos']) => Promise<TransactionFeeInfo | undefined>;\n}\n\nexport const computeRouteInfos = ({\n  routes,\n  amount,\n  inputMint,\n  outputMint,\n  platformFeeBps,\n  slippage,\n  getDepositAndFeeForRoute,\n}: GetQuotesParams) => {\n  const routesInfo: RouteInfo[] = routes\n    .map((route) => {\n      const { marketMetas, intermediateMint } = route;\n\n      // Chain all marketMetas\n      let marketInfos: MarketInfo[] = [];\n      let intermediateAmount = amount;\n      let outAmountWithSlippage = amount;\n      const platformFeeSupported = isPlatformFeeSupported(marketMetas);\n      const tokenMints: PublicKey[] = [inputMint, outputMint];\n      // TODO: Avoid this hack with a smarter data structure\n      if (intermediateMint) {\n        tokenMints.splice(1, 0, intermediateMint);\n      }\n\n      const legs = marketMetas.length;\n      for (const [i, marketMeta] of marketMetas.entries()) {\n        try {\n          const sourceMint = tokenMints[i];\n          const destinationMint = tokenMints[i + 1];\n          const quote = marketMeta.amm.getQuote({\n            sourceMint,\n            destinationMint,\n            amount: intermediateAmount,\n          });\n\n          // Platform fee applicable only on last leg\n          const platformFee =\n            legs - 1 === i && platformFeeSupported\n              ? {\n                  amount: Math.floor((quote.outAmount * platformFeeBps) / PLATFORM_FEE_DENOMINATOR),\n                  mint: destinationMint.toBase58(),\n                  pct: platformFeeBps / 100,\n                }\n              : { amount: 0, mint: destinationMint.toBase58(), pct: 0 };\n\n          const outAmountAfterFees = Math.max(0, quote.outAmount - platformFee.amount);\n\n          const legOutAmountWithSlippage = Math.round(outAmountAfterFees * (1 - slippage / 100));\n\n          marketInfos.push({\n            marketMeta,\n            inputMint: sourceMint,\n            outputMint: destinationMint,\n            notEnoughLiquidity: quote.notEnoughLiquidity,\n            minInAmount: quote.minInAmount,\n            minOutAmount: quote.minOutAmount,\n            inAmount: quote.inAmount,\n            outAmount: outAmountAfterFees,\n            priceImpactPct: quote.priceImpactPct,\n            lpFee: {\n              amount: quote.feeAmount,\n              mint: quote.feeMint,\n              pct: quote.feePct,\n            },\n            platformFee,\n          });\n\n          intermediateAmount = outAmountAfterFees;\n          outAmountWithSlippage = legOutAmountWithSlippage;\n        } catch (e: any) {\n          // we supress this error because it is not too critical and it's serum specific\n          if (e.message === 'Number can only safely store up to 53 bits') {\n            return undefined;\n          }\n          throw e;\n        }\n      }\n\n      return {\n        marketInfos,\n        getDepositAndFee: () => getDepositAndFeeForRoute(marketInfos),\n        inAmount: marketInfos[0].inAmount,\n        outAmount: intermediateAmount,\n        outAmountWithSlippage: outAmountWithSlippage,\n        priceImpactPct:\n          1 -\n          marketInfos.reduce((priceFactor, marketInfo) => {\n            priceFactor *= 1 - marketInfo.priceImpactPct;\n            return priceFactor;\n          }, 1),\n      };\n    })\n    .filter((item): item is RouteInfo => item !== undefined)\n    .sort((a, b) => b.outAmount - a.outAmount); // sort based on which one have better output\n\n  return routesInfo;\n};\n\nasync function routeBatchFetcher(\n  connection: Connection,\n  routes: Route[],\n  externalAccountInfosMap?: Map<string, AccountInfo<Buffer>>,\n) {\n  const hasExternalAccountInfosMap = Boolean(externalAccountInfosMap);\n  const accountInfosMap = externalAccountInfosMap || new Map();\n\n  // dont fetch if externalAccountInfosMap is given\n  if (!hasExternalAccountInfosMap) {\n    externalAccountInfosMap = new Map();\n    const accountsToFetchSet = new Set<string>();\n\n    routes.forEach(({ marketMetas }) => {\n      return marketMetas.forEach(({ amm }) => {\n        amm.getAccountsForUpdate().forEach((account) => {\n          // Only add accountInfos that is not in the Map\n          accountsToFetchSet.add(account.toBase58());\n        });\n      });\n    });\n\n    const accountsToFetch = Array.from(accountsToFetchSet);\n\n    if (accountsToFetch.length > 0) {\n      const accountInfos = await chunkedGetMultipleAccountInfos(\n        connection,\n        accountsToFetch.map((account) => new PublicKey(account)),\n      );\n\n      accountInfos.forEach((item, index) => {\n        const publicKey = accountsToFetch[index];\n        if (item) {\n          accountInfosMap.set(publicKey, item);\n        }\n      });\n    }\n  }\n\n  routes.forEach(({ marketMetas }) => {\n    marketMetas.forEach(({ amm }) => {\n      amm.update(accountInfosMap);\n    });\n  });\n}\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  AccountInfo,\n  Cluster,\n  Connection,\n  FeeCalculator,\n  Keypair,\n  PublicKey,\n  Transaction,\n  TransactionResponse,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nimport { OpenOrders } from '@project-serum/serum';\nimport {\n  computeRouteMap,\n  computeRoutes,\n  getAllAmms,\n  getTokenRouteSegments,\n  isSplitSetupRequired,\n  RouteInfo,\n} from './routes';\nimport { MarketInfo } from './market';\nimport { DEVNET_SERUM_DEX_PROGRAM, JUPITER_WALLET, MAINNET_SERUM_DEX_PROGRAM, WRAPPED_SOL_MINT } from '../constants';\nimport { getDepositAndFeeFromInstructions, NO_PLATFORM_FEE } from './fee';\nimport { deleteInstructionCache, getCacheMintKey, getInstructionCache } from './cache';\nimport routeToInstructions, { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { createAndCloseWSOLAccount } from '../utils/token';\nimport { getEmptyInstruction } from '../utils/instruction';\nimport { TransactionBuilder } from '../utils/TransactionBuilder';\nimport { Owner } from '../utils/Owner';\nimport { getConfirmTransaction, getTokenBalanceChangesFromTransactionResponse } from '../utils/transactionHelpers';\nimport {\n  createCreateTokenLedgerInstruction,\n  createOpenOrdersInstruction,\n  createRaydiumSwapInstruction,\n  createMercurialExchangeInstruction,\n  createSerumSwapInstruction,\n  createSetTokenLedgerInstruction,\n} from './jupiterInstruction';\nimport { fetchRoutes, computeRouteInfos } from './computeRouteInfos';\nimport type { SignerWalletAdapter } from '@solana/wallet-adapter-base';\nimport { TransactionError } from './error';\nimport { InstructionCache, TokenRouteSegments, PlatformFeeAndAccounts, QuoteMintToReferrer } from './types';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { TokenMintAddress } from './types';\nimport { getPlatformFeeAccounts } from './fee';\n\nexport type SerumOpenOrdersMap = Map<string, PublicKey>;\nexport { MarketInfo } from './market';\nexport { getPlatformFeeAccounts } from './fee';\nexport * from './types';\nexport { RouteInfo, TransactionFeeInfo, getRouteInfoUniqueId } from './routes';\nexport { AldrinAmm, RaydiumAmm, SerumAmm, SaberAmm, SplTokenSwapAmm, MercurialAmm, CropperAmm, SenchaAmm };\n\nexport type SwapResult =\n  | {\n      txid: string;\n      inputAddress: PublicKey;\n      outputAddress: PublicKey;\n      inputAmount: number | undefined;\n      outputAmount: number | undefined;\n    }\n  | {\n      error?: TransactionError;\n    };\n\ntype InputMintAndOutputMint = string;\n\ntype JupiterLoadArgs = {\n  connection: Connection;\n  cluster: Cluster;\n  user?: PublicKey | Keypair;\n  platformFeeAndAccounts?: PlatformFeeAndAccounts;\n  quoteMintToReferrer?: Map<TokenMintAddress, PublicKey>;\n  routeCacheDuration?: number;\n  wrapUnwrapSOL?: boolean;\n  marketUrl?: string;\n};\n\nexport class Jupiter {\n  /* promise because we can choose not to await it when we dont need it */\n  private serumOpenOrdersPromise: Promise<SerumOpenOrdersMap> | undefined = undefined;\n  private instructionCache: InstructionCache = new Map();\n  private user: Keypair | PublicKey | undefined;\n  private routeCache = new Map<InputMintAndOutputMint, { fetchTimestamp: number }>();\n\n  constructor(\n    private connection: Connection,\n    private cluster: Cluster,\n    public tokenRouteSegments: TokenRouteSegments,\n    private feeCalculator: FeeCalculator,\n    private platformFeeAndAccounts: PlatformFeeAndAccounts,\n    /** Referrer account to collect Serum referrer fees for each given quote mint, the referrer fee is 20% of the Serum protocol fee */\n    private quoteMintToReferrer: QuoteMintToReferrer,\n    /** route cache duration in ms */\n    private routeCacheDuration: number = 0,\n    /** When set to true (default) native SOL is wrapped and wSOL unwrapped in each swap, otherwise it assumes wSOL is funded when it exists */\n    private wrapUnwrapSOL: boolean = true,\n  ) {}\n\n  /**\n   * load performs the necessary async scaffolding of the Jupiter object\n   */\n  static async load({\n    connection,\n    cluster,\n    user,\n    platformFeeAndAccounts = NO_PLATFORM_FEE,\n    quoteMintToReferrer,\n    routeCacheDuration = 0,\n    wrapUnwrapSOL = true,\n    // @internal,\n    marketUrl,\n  }: JupiterLoadArgs) {\n    const [\n      tokenRouteSegments,\n      {\n        value: { feeCalculator },\n      },\n      defaultQuoteMintToReferrer,\n    ] = await Promise.all([\n      Jupiter.fetchTokenRouteSegments(connection, cluster, marketUrl),\n      connection.getRecentBlockhashAndContext('processed'),\n      getPlatformFeeAccounts(connection, new PublicKey(JUPITER_WALLET)),\n    ]);\n\n    const jupiter = new Jupiter(\n      connection,\n      cluster,\n      tokenRouteSegments,\n      feeCalculator,\n      platformFeeAndAccounts,\n      quoteMintToReferrer || defaultQuoteMintToReferrer,\n      routeCacheDuration,\n      wrapUnwrapSOL,\n    );\n    if (user) jupiter.setUserPublicKey(user);\n    return jupiter;\n  }\n\n  getPublicKeysToUpdate() {\n    const publicKeys = new Set<string>();\n    this.tokenRouteSegments.forEach((tokenRouteSegment) => {\n      Array.from(tokenRouteSegment.values()).forEach((marketInfos) => {\n        marketInfos.forEach(({ amm }) => {\n          amm.getAccountsForUpdate().forEach((account) => {\n            publicKeys.add(account.toBase58());\n          });\n        });\n      });\n    });\n\n    return Array.from(publicKeys);\n  }\n\n  async computeRoutes(\n    inputMint: PublicKey,\n    outputMint: PublicKey,\n    inputAmount: number,\n    slippage: number,\n    shouldFetchRoutes: boolean = false,\n    /* external accountInfosMap that allow external fetching  */\n    externalAccountInfosMap?: Map<string, AccountInfo<Buffer>>,\n    feeBps: number = 0,\n  ) {\n    const getDepositAndFees = async (marketInfos: MarketInfo[]) => {\n      if (this.user && this.serumOpenOrdersPromise) {\n        const owner = new Owner(this.user);\n        return getDepositAndFeeFromInstructions({\n          connection: this.connection,\n          feeCalculator: this.feeCalculator!,\n          instructionCache: this.instructionCache,\n          marketInfos: marketInfos,\n          serumOpenOrdersPromise: this.serumOpenOrdersPromise,\n          userPublicKey: owner.publicKey,\n          unwrapSOL: this.wrapUnwrapSOL,\n        });\n      }\n    };\n\n    // Platform fee can only be applied when fee account exists\n    const platformFeeBps =\n      feeBps ||\n      (this.platformFeeAndAccounts.feeAccounts.get(outputMint.toBase58()) ? this.platformFeeAndAccounts.feeBps : 0);\n\n    const now = new Date().getTime();\n\n    // do sort so that it's always the same order for the same inputMint and outputMint and vice versa\n    const inputMintAndOutputMint = [inputMint.toBase58(), outputMint.toBase58()]\n      .sort((a, b) => a.localeCompare(b))\n      .join('');\n\n    const routeCache = this.routeCache.get(inputMintAndOutputMint);\n\n    const routes = computeRoutes(inputMint, outputMint, this.tokenRouteSegments);\n\n    if (routeCache) {\n      const { fetchTimestamp } = routeCache;\n      if (now - fetchTimestamp > this.routeCacheDuration) {\n        shouldFetchRoutes = true;\n      }\n    } else {\n      shouldFetchRoutes = true;\n    }\n\n    if (shouldFetchRoutes) {\n      await fetchRoutes(this.connection, routes, externalAccountInfosMap);\n\n      this.routeCache.set(inputMintAndOutputMint, {\n        fetchTimestamp: new Date().getTime(),\n      });\n    }\n\n    try {\n      const routesInfos = computeRouteInfos({\n        routes,\n        amount: inputAmount,\n        inputMint,\n        outputMint,\n        getDepositAndFeeForRoute: getDepositAndFees,\n        slippage,\n        platformFeeBps,\n      });\n      return {\n        routesInfos,\n        /* indicate if the result is fetched or get from cache */\n        cached: !shouldFetchRoutes,\n      };\n    } catch (e) {\n      throw e;\n    } finally {\n      // clear cache if it is expired\n      this.routeCache.forEach(({ fetchTimestamp }, key) => {\n        if (fetchTimestamp - now > this.routeCacheDuration) {\n          this.routeCache.delete(key);\n        }\n      });\n    }\n  }\n\n  setUserPublicKey(userPublicKey: Keypair | PublicKey) {\n    this.user = userPublicKey;\n    const owner = new Owner(this.user);\n    this.serumOpenOrdersPromise = Jupiter.findSerumOpenOrdersForOwner({\n      connection: this.connection,\n      cluster: this.cluster,\n      userPublicKey: owner.publicKey,\n    });\n  }\n\n  /**\n   * The token route segments contains all the routes and the market meta information.\n   */\n  static async fetchTokenRouteSegments(connection: Connection, cluster: Cluster, marketUrl?: string) {\n    const amms = await getAllAmms(connection, cluster, marketUrl);\n\n    const tokenRouteSegments = getTokenRouteSegments(amms);\n\n    return tokenRouteSegments;\n  }\n\n  /**\n   * This generate a routeMap which represents every possible output token mint for a given input token mint.\n   * For example, we have SOL to USDC and this pairs have many routings like\n   * SOL => USDT\n   * USDT => USDC\n   * SOL => USDC\n   *\n   * From here we know that we can have 2 different routing of SOL => USDC.\n   * We do single level routing map but for all coins which result in the route map below:\n   * SOL => USDT, USDC\n   * USDT => SOL\n   * USDC => SOL, USDT\n   *\n   * From this route map we can map out all possible route from one to another by checking the intersection.\n   */\n  getRouteMap() {\n    return computeRouteMap(this.tokenRouteSegments);\n  }\n\n  /**\n   * Query existing open order account, this query is slow.\n   * We suggest to fetch this in the background.\n   */\n  static findSerumOpenOrdersForOwner = async ({\n    userPublicKey,\n    cluster,\n    connection,\n  }: {\n    userPublicKey: PublicKey;\n    cluster: Cluster;\n    connection: Connection;\n  }) => {\n    const newMarketToOpenOrdersAddress: SerumOpenOrdersMap = new Map();\n\n    if (userPublicKey) {\n      const programId = cluster === 'mainnet-beta' ? MAINNET_SERUM_DEX_PROGRAM : DEVNET_SERUM_DEX_PROGRAM;\n\n      const allOpenOrders = await OpenOrders.findForOwner(connection, userPublicKey, programId);\n\n      allOpenOrders.forEach((openOrders) => {\n        newMarketToOpenOrdersAddress.set(openOrders.market.toString(), openOrders.address);\n      });\n    }\n    return newMarketToOpenOrdersAddress;\n  };\n\n  public exchange: (params: { route: RouteInfo; userPublicKey?: PublicKey; feeAccount?: PublicKey }) => Promise<{\n    transactions: {\n      setupTransaction?: Transaction;\n      swapTransaction: Transaction;\n      cleanupTransaction?: Transaction;\n    };\n    execute: (params?: {\n      wallet?: Pick<SignerWalletAdapter, 'sendTransaction' | 'signAllTransactions' | 'signTransaction'>;\n      confirmationWaiterFactory?: (txid: TransactionSignature, totalTxs: number) => Promise<TransactionResponse | null>;\n    }) => Promise<SwapResult>;\n  }> = async ({ route, userPublicKey, feeAccount }) => {\n    const { connection, serumOpenOrdersPromise } = this;\n    const user: PublicKey | Keypair | undefined = userPublicKey || this.user;\n    if (!user) {\n      throw new Error('user not found');\n    }\n\n    const owner = new Owner(user);\n\n    const lastMarketInfoIndex = route.marketInfos.length - 1;\n    const inputMint = route.marketInfos[0].inputMint;\n    const outputMint = route.marketInfos[lastMarketInfoIndex].outputMint;\n\n    const cacheKey = getCacheMintKey(route.marketInfos);\n\n    let instructions = getInstructionCache({\n      instructionCache: this.instructionCache,\n      walletPublicKey: owner.publicKey.toBase58(),\n      cacheKey,\n    });\n\n    if (!instructions) {\n      const [ataInstructions, openOrdersInstructions] = await Promise.all([\n        routeAtaInstructions(connection, route.marketInfos, owner.publicKey, this.wrapUnwrapSOL),\n        Promise.all(\n          route.marketInfos.map(async ({ marketMeta: { amm } }) => {\n            if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n              if (!amm.market) return;\n              return await getOrCreateOpenOrdersAddress(\n                connection,\n                owner.publicKey,\n                amm.market,\n                await serumOpenOrdersPromise,\n              );\n            }\n            return;\n          }),\n        ),\n      ]);\n\n      instructions = {\n        intermediate: ataInstructions.userIntermediaryTokenAccountResult,\n        destination: ataInstructions.userDestinationTokenAccountResult,\n        openOrders: openOrdersInstructions,\n      };\n    }\n\n    const sourceInstruction =\n      inputMint.equals(WRAPPED_SOL_MINT) && this.wrapUnwrapSOL\n        ? await createAndCloseWSOLAccount(connection, owner.publicKey, route.inAmount)\n        : {\n            ...getEmptyInstruction(),\n            address: await Token.getAssociatedTokenAddress(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              inputMint,\n              owner.publicKey,\n            ),\n          };\n\n    // Construct platform fee\n    feeAccount = feeAccount || this.platformFeeAndAccounts.feeAccounts.get(outputMint.toBase58());\n\n    const platformFee = feeAccount\n      ? {\n          feeBps:\n            this.platformFeeAndAccounts.feeBps ||\n            Math.floor(route.marketInfos[lastMarketInfoIndex].platformFee.pct * 100),\n          feeAccount,\n        }\n      : undefined;\n\n    const preparedInstructions = await routeToInstructions(\n      owner,\n      instructions.openOrders.map((oo) => oo?.address),\n      sourceInstruction.address,\n      instructions.intermediate?.address,\n      instructions.destination.address,\n      route,\n      platformFee,\n      this.quoteMintToReferrer,\n    );\n\n    const splitSetupRequired = isSplitSetupRequired(route.marketInfos);\n\n    const setupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const transactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const cleanupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    if (splitSetupRequired) {\n      if (instructions.openOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            setupTransactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      if (instructions.intermediate) {\n        setupTransactionBuilder.addInstruction({\n          ...instructions.intermediate,\n          cleanupInstructions: [],\n        });\n      }\n\n      setupTransactionBuilder.addInstruction({\n        ...sourceInstruction,\n        cleanupInstructions: [],\n      });\n\n      cleanupTransactionBuilder\n        .addInstruction({\n          ...getEmptyInstruction(),\n          cleanupInstructions: sourceInstruction.cleanupInstructions,\n        })\n        .addInstruction({\n          ...getEmptyInstruction(),\n          cleanupInstructions: instructions.intermediate?.cleanupInstructions ?? [],\n        });\n\n      // if source address the same as destination address, then we don't need to setup or cleanup twice, mainly SOL-SOL\n      if (!sourceInstruction.address.equals(instructions.destination.address)) {\n        setupTransactionBuilder.addInstruction({\n          ...instructions.destination,\n          cleanupInstructions: [],\n        });\n\n        cleanupTransactionBuilder.addInstruction({\n          ...getEmptyInstruction(),\n          cleanupInstructions: instructions.destination.cleanupInstructions,\n        });\n      }\n    } else {\n      if (instructions.openOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            transactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      if (instructions.intermediate) {\n        transactionBuilder.addInstruction(instructions.intermediate);\n      }\n\n      transactionBuilder.addInstruction(sourceInstruction);\n\n      // if source address the same as destination address, then we don't need to setup or cleanup twice, mainly SOL-SOL\n      if (!sourceInstruction.address.equals(instructions.destination.address)) {\n        transactionBuilder.addInstruction(instructions.destination);\n      }\n    }\n\n    transactionBuilder.addInstruction(preparedInstructions);\n\n    const recentBlockHash = (await this.connection.getRecentBlockhash('singleGossip')).blockhash;\n\n    const { transaction: setupTransaction } = await setupTransactionBuilder.build(recentBlockHash);\n\n    const { transaction } = await transactionBuilder.build(recentBlockHash);\n\n    const { transaction: cleanupTransaction } = await cleanupTransactionBuilder.build(recentBlockHash);\n\n    // Is this horrible? Yes.\n    const [setupTransactionObject, swapTransactionObject, cleanupTransactionObject] = ((): [\n      one: Transaction | undefined,\n      two: Transaction,\n      three: Transaction | undefined,\n    ] => {\n      if (setupTransaction.instructions.length && cleanupTransaction.instructions.length) {\n        return [setupTransaction, transaction, cleanupTransaction] as [\n          one: Transaction | undefined,\n          two: Transaction,\n          three: Transaction | undefined,\n        ];\n      } else if (setupTransaction.instructions.length) {\n        const [first, second] = [setupTransaction, transaction];\n\n        return [first, second, undefined];\n      } else if (cleanupTransaction.instructions.length) {\n        const [second, third] = [transaction, cleanupTransaction];\n\n        return [undefined, second, third];\n      } else {\n        return [undefined, transaction, undefined];\n      }\n    })();\n\n    return {\n      transactions: {\n        setupTransaction: setupTransactionObject,\n        swapTransaction: swapTransactionObject,\n        cleanupTransaction: cleanupTransactionObject,\n      },\n      execute: async ({\n        wallet,\n        confirmationWaiterFactory,\n      }: {\n        wallet?: Pick<SignerWalletAdapter, 'sendTransaction' | 'signAllTransactions' | 'signTransaction'>;\n        confirmationWaiterFactory?: (\n          txid: TransactionSignature,\n          totalTxs: number,\n        ) => Promise<TransactionResponse | null>;\n      } = {}) => {\n        let txid: TransactionSignature = '';\n        try {\n          const transactions = [setupTransactionObject, swapTransactionObject, cleanupTransactionObject].filter(\n            Boolean,\n          ) as Transaction[];\n\n          const totalTxs = transactions.length;\n\n          if (owner.isKeyPair && owner.signer) {\n            transactions.forEach((transaction) => {\n              transaction.sign(owner.signer!);\n            });\n          } else {\n            if (!wallet) {\n              throw new Error('Signer wallet not found');\n            }\n            if (totalTxs > 1) {\n              await wallet.signAllTransactions(transactions);\n            } else {\n              await wallet.signTransaction(transactions[0]);\n            }\n          }\n\n          let setupError;\n\n          if (setupTransactionObject) {\n            try {\n              const setupTxid = await connection.sendRawTransaction(setupTransactionObject.serialize(), {\n                skipPreflight: true,\n              });\n\n              if (confirmationWaiterFactory) {\n                await confirmationWaiterFactory(setupTxid, totalTxs);\n              } else {\n                await getConfirmTransaction(connection, setupTxid);\n              }\n            } catch (e) {\n              setupError = e;\n              throw setupError;\n            }\n          }\n\n          try {\n            const txid = await connection.sendRawTransaction(swapTransactionObject.serialize(), {\n              skipPreflight: true,\n            });\n\n            let transactionResponse: TransactionResponse | null = null;\n            if (confirmationWaiterFactory) {\n              transactionResponse = await confirmationWaiterFactory(txid, totalTxs);\n            }\n\n            if (!transactionResponse) {\n              transactionResponse = await getConfirmTransaction(connection, txid);\n            }\n\n            const [sourceTokenBalanceChange, destinationTokenBalanceChange] =\n              getTokenBalanceChangesFromTransactionResponse(\n                inputMint,\n                outputMint,\n                sourceInstruction.address,\n                instructions!.destination.address,\n                transactionResponse,\n              );\n\n            return {\n              txid,\n              inputAddress: sourceInstruction.address,\n              outputAddress: instructions!.destination.address,\n              inputAmount: sourceTokenBalanceChange,\n              outputAmount: destinationTokenBalanceChange,\n            };\n          } catch (e) {\n            throw e;\n          } finally {\n            if (cleanupTransactionObject && !setupError) {\n              const cleanupTxId = await connection.sendRawTransaction(cleanupTransactionObject.serialize(), {\n                skipPreflight: true,\n              });\n              await confirmationWaiterFactory?.(cleanupTxId, totalTxs);\n            }\n          }\n        } catch (e) {\n          const transactionError = e as TransactionError;\n          if (txid) {\n            transactionError.txid = txid;\n          }\n\n          return {\n            error: transactionError,\n          };\n        } finally {\n          const hasOpenOrders = instructions?.openOrders.some((oo) => oo?.instructions.length);\n          if (\n            hasOpenOrders ||\n            instructions?.intermediate?.instructions.length ||\n            instructions?.destination.instructions.length\n          ) {\n            deleteInstructionCache({\n              instructionCache: this.instructionCache,\n              walletPublicKey: owner.publicKey.toBase58(),\n            });\n          }\n          this.routeCache.clear();\n        }\n      },\n    };\n  };\n\n  static createCreateTokenLedgerInstruction = createCreateTokenLedgerInstruction;\n  static createOpenOrdersInstruction = createOpenOrdersInstruction;\n  static createRaydiumSwapInstruction = createRaydiumSwapInstruction;\n  static createMercurialExchangeInstruction = createMercurialExchangeInstruction;\n  static createSerumSwapInstruction = createSerumSwapInstruction;\n  static createSetTokenLedgerInstruction = createSetTokenLedgerInstruction;\n}\n"],"names":["IDL","version","name","instructions","accounts","isMut","isSigner","args","type","option","defined","kind","fields","types","variants","errors","code","msg","WRAPPED_SOL_MINT","PublicKey","MAINNET_SERUM_DEX_PROGRAM","DEVNET_SERUM_DEX_PROGRAM","MARKETS_URL","devnet","testnet","TOKEN_LIST_URL","RAYDIUM_AMM_V4_PROGRAM_ID","ALDRIN_SWAP_PROGRAM_ID","ALDRIN_SWAP_V2_PROGRAM_ID","SABER_ADD_DECIMALS_PROGRAM_ID","CROPPER_PROGRAM_ID","SENCHA_PROGRAM_ID","ZERO_FRACTION","Fraction","JSBI","BigInt","JUPITER_WALLET","MERCURIAL_SWAP_PROGRAM_ID","PublicKeyLayout","Layout","constructor","property","layout","blob","span","getSpan","b","offset","decode","encode","src","toBuffer","publicKey","U64Layout","bn","u64","toArrayLike","Buffer","uint64","uint128","CropperTokenSwapLayout","struct","u8","CropperStateLayout","CROPPER_STATE_ADDRESS","accountInfoToCropperPoolState","address","accountInfo","programId","owner","decoded","data","authority","findProgramAddressSync","isInitialized","Boolean","nonce","ammId","serumProgramId","tokenProgramId","tokenAAccount","tokenBAccount","serumMarket","poolMint","mintA","mintB","stateAccountInfoToCropperState","stateOwner","feeOwner","initialSupply","returnFeeNumerator","toNumber","fixedFeeNumerator","feeDenominator","curveType","curveParameters","Side","Bid","bid","Ask","ask","JUPITER_PROGRAM_ID_PRODUCTION","JUPITER_PROGRAM_ID","JUPITER_PROGRAM","Program","TOKEN_LEDGER","from","stableSwapNPoolIntoMercurialExchange","swayLayout","sourceTokenAccount","destinationTokenAccount","user","swapProgram","swapState","tokenProgram","TOKEN_PROGRAM_ID","poolAuthority","userTransferAuthority","raydiumAmmToRaydiumSwap","raydiumAmm","userSourceTokenAccountAddress","userDestinationTokenAccountAddress","ammAuthority","Uint8Array","replace","serumMarketKeys","Error","ammOpenOrders","poolCoinTokenAccount","poolPcTokenAccount","serumBids","serumAsks","serumEventQueue","serumCoinVaultAccount","serumPcVaultAccount","serumVaultSigner","userSourceTokenAccount","userDestinationTokenAccount","userSourceOwner","marketIntoSerumSwap","market","openOrdersAddress","orderPayerTokenAccountAddress","coinWallet","pcWallet","vaultSigner","createProgramAddressSync","vaultSignerNonce","openOrders","requestQueue","eventQueue","bids","bidsAddress","asks","asksAddress","coinVault","baseVault","pcVault","quoteVault","orderPayerTokenAccount","dexProgram","rent","SYSVAR_RENT_PUBKEY","createMercurialExchangeInstruction","swapLayout","amount","minimumOutAmount","platformFee","remainingAccounts","swapTokenAccount","tokenAccounts","push","pubkey","isWritable","prepareRemainingAccounts","feeAccount","instruction","mercurialExchange","BN","feeBps","createSerumSwapInstruction","inputMint","referrer","side","equals","baseMintAddress","serumSwap","createTokenSwapInstruction","tokenSwapState","isStep","swapSource","swapDestination","tokenAccountA","tokenAccountB","stepTokenSwap","tokenSwap","tokenSwapProgram","swap","source","destination","poolToken","poolFee","createSenchaSwapInstruction","poolState","sourceMint","token0Mint","token0Reserves","token1Reserves","feesSource","feesDestination","token0Fees","token1Fees","senchaExchange","userAuthority","inputUserAccount","inputTokenAccount","inputFeesAccount","outputUserAccount","outputTokenAccount","outputFeesAccount","createCropperSwapInstruction","cropperTokenSwap","createRaydiumSwapInstruction","raydiumSwapV2","createAldrinSwapInstruction","userBaseTokenAccount","userQuoteTokenAccount","baseTokenMint","aldrinSwap","pool","poolSigner","baseTokenVault","quoteTokenVault","feePoolTokenAccount","walletAuthority","createAldrinV2SwapInstruction","curve","aldrinV2Swap","createRiskCheckAndFeeInstruction","riskCheckAndFee","tokenLedger","createSetTokenLedgerInstruction","tokenAccountAddress","setTokenLedger","tokenAccount","createCreateTokenLedgerInstruction","initializeTokenLedger","payer","systemProgram","SystemProgram","createOpenOrdersInstruction","ix","createOpenOrders","saberPoolIntoSaberExchange","saberPool","sourceMintAddress","feesTokenAccount","state","tokenA","mint","tokenB","adminFeeAccount","reserve","config","swapProgramID","swapAccount","swapAuthority","clock","SYSVAR_CLOCK_PUBKEY","createSaberExchangeInstruction","saberExchange","createSaberAddDecimalsDepositInstruction","addDecimals","sourceTokenAccountAddress","destinationTokenAccountAddress","saberAddDecimalsDeposit","addDecimalsProgram","wrapper","wrapperMint","wrapperUnderlyingTokens","userUnderlyingTokens","userWrappedTokens","createSaberAddDecimalsWithdrawInstruction","saberAddDecimalsWithdraw","getSaberWrappedDecimalsAmms","addDecimalsJson","map","addDecimalJson","underlying","underlyingDecimals","decimals","SaberAddDecimalsAmm","WrappedToken","multiplier","getOutputAmount","inputAmount","calculateWithdrawOutputAmount","calculateDepositOutputAmount","toString","multiply","divide","wrappedToken","label","id","toBase58","getAccountsForUpdate","Array","update","_accountInfoMap","getQuote","outAmount","notEnoughLiquidity","inAmount","feeAmount","feeMint","feePct","priceImpactPct","createSwapInstructions","reserveTokenMints","getTwoPermutations","array","reduce","acc","item","forEach","otherItem","mapAddressToAccountInfos","accountInfoMap","addresses","accountInfos","get","AMM_INFO_LAYOUT_V4","nu64","RaydiumAmm","ammAccountInfo","coinMint","pcMint","status","ammTargetOrders","coinReserve","pcReserve","swapFeeNumerator","swapFeeDenominator","coinMintAddress","pcMintAddress","poolCoinTokenAccountInfo","poolPcTokenAccountInfo","ammOpenOrdersAccountInfo","serumMarketMarketInfo","coinAmount","pcAmount","tokenAmountAccessor","OpenOrders","fromAccountInfo","decodedMarket","Market","getLayout","add","baseTokenTotal","sub","String","needTakePnlCoin","quoteTokenTotal","needTakePnlPc","tokenAccountInfo","fromBuffer","slice","inputReserve","outputReserve","inAmountBN","mul","div","inAmountAfterFee","numerator","denominator","outAmountWithoutPriceImpact","outAmountBN","Number","Decimal","TAKER_FEE_PCT","STABLE_TAKER_FEE_PCT","STABLE_MARKET_ADDRESSES","getOutAmountMeta","fromAmount","fromMint","toMint","takerFeePct","includes","quoteMintAddress","forecastBuy","forecastSell","orderBook","pcIn","coinOut","bestPrice","worstPrice","totalCost","totalCoins","availablePc","baseSizeLots","baseSizeLotsToNumber","quoteSizeLots","quoteSizeLotsToNumber","order","items","price","priceLotsToNumber","priceLots","size","sizeLots","orderCoinAmount","orderPcAmount","lotPrice","numberLotsCanBuy","Math","floor","minimum","in","ceil","out","round","coinIn","pcOut","availableCoin","numberLotsCanSell","SerumAmm","orderbooks","asksAccountInfo","bidsAccountInfo","Orderbook","destinationMint","outAmountMeta","minInAmount","minOutAmount","quoteMintToReferrer","isSplitSupported","firstAmm","secondAmm","requiresSplitSetup","SplitTradeAmm","shouldSplitSetup","portion1","portion2","create","firstAmmTwoPermutations","secondAmmTwoPermutations","firstAmmTwoPermutation","secondAmmTwoPermutation","every","value","index","labelWithPortions","portion","sort","a","join","quoteParams","sourceMintString","bestSolution","firstQuote","undefined","secondQuote","p","firstAmount","secondAmount","firstAmmFee","secondAmmFee","swapParams","isValidRoute","ammA","ammB","deserializeAccount","length","AccountLayout","delegateOption","delegate","delegatedAmount","isFrozen","isNativeOption","rentExemptReserve","isNative","closeAuthorityOption","closeAuthority","SaberAmm","stableSwap","calculator","tokenAccountInfos","info","Stable","targetAmpFactor","ONE","fees","trade","asFraction","toFixed","inputIndex","outputIndex","result","exchange","expectedOutputAmount","priceImpact","ZERO","Percentage","fromDecimal","number","fromFraction","toDecimalPlaces","num","denom","toDecimal","eq","p2","denomGcd","gcd","denomLcm","p1DenomAdjustment","p2DenomAdjustment","p1NumeratorAdjusted","p2NumeratorAdjusted","newNumerator","FEES_LAYOUT","POOL_FIELDS_COMMON","POOL_LAYOUT","POOL_V2_LAYOUT","STABLE_CURVE_LAYOUT","accountInfoToAldrinPoolState","isV2","curveObject","quoteTokenMint","feeBaseAccount","feeQuoteAccount","traderFee","tradeFeeNumerator","tradeFeeDenominator","ownerFee","ownerTradeFeeNumerator","ownerTradeFeeDenominator","AldrinAmm","params","decodeStableCurveAmp","amp","TokenSwapConstantProduct","TokenSwapStable","TOKEN_SWAP_POOLS","STEP_TOKEN_SWAP_PROGRAM_ID","PROGRAM_ID_TO_LABEL","Map","getTokenSwapPools","cluster","TokenSwapLayout","StepTokenSwapLayout","accountInfoToTokenSwapState","tokenSwapAccountInfo","tokenSwapData","tokenPool","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","poolNonce","CurveType","SplTokenSwapAmm","swapStateAccountInfo","ConstantProduct","FEE_DENOMINATOR","pow","MercurialSwapLayout","u32","accountInfoToMercurialSwapLayout","tokenAccountsLength","precisionMultipliers","precisionMultiplierA","precisionMultiplierB","precisionMultiplierC","precisionMultiplierD","tokenAccountC","tokenAccountD","amplificationCoefficient","feeNumerator","precisionFactor","MercurialAmm","filter","x","precisionMultiplier","findIndex","tokenMints","tokenMint","decodeSwapLayout","CropperAmm","getStateFromStateAccount","connection","getAccountInfo","tokenAFeeAccount","tokenBFeeAccount","decodePoolState","SenchaSwapLayout","accountInfoToSenchaPoolState","isPaused","bump","token1Mint","tradeFeeKbps","SenchaAmm","ammFactory","SerumMarket","accountFlags","initialized","SABER_SWAP_PROGRAM_ID","StableSwap","loadWithData","keys","getAllAmms","marketUrl","marketsCache","fetch","json","marketCacheToAccountInfo","format","rest","tokenSwapPools","extraKeys","extraMarketKeyedAccountInfos","getMultipleAccountsInfo","marketKeyedAccountInfos","concat","amms","keyedAccountInfo","amm","naturalAmms","ammCrossProtocolPairs","splitTradeAmm","arr","func","i","j","getTokenRouteSegments","tokenRouteSegments","reserveTokenMintPermutations","firstReserveMint","secondReserveMint","addSegment","inMint","outMint","segments","set","marketMetas","computeRoutes","outputMint","routes","firstSegment","simpleRoutes","simpleRoute","secondSegment","entries","intersectionMarketMetas","marketMeta","intersectionMarketMeta","intermediateMint","computeRouteMap","routeMap","firstLevelOutputs","validOutputMints","Set","firstLevelOutputMint","firstLevelMarketMetas","secondLevelOutputs","secondLevelOutputMint","secondLevelMarketMetas","firstLevelMarketMeta","secondLevelMarketMeta","isSplitSetupRequired","marketInfos","firstMarket","secondMarket","marketInfo","isPlatformFeeSupported","getRouteInfoUniqueId","routeInfo","getCacheMintKey","getInstructionCache","instructionCache","walletPublicKey","cacheKey","setInstructionCache","instructionResult","walletCache","deleteInstructionCache","clear","getEmptyInstruction","cleanupInstructions","signers","createAndCloseWSOLAccount","toAccount","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","transfer","fromPubkey","toPubkey","lamports","createSyncNativeInstruction","createCloseAccountInstruction","findOrCreateAssociatedAccountByMint","mintAddress","unwrapSOL","routeToInstructions","openOrdersAddresses","userIntermediaryTokenAccountAddress","outAmountWithSlippage","legs","userTokenAccountAddresses","platformFeeSupported","mi","legInputAmount","legOutAmountWithSlippage","legPlatformFee","isKeyPair","signer","routeAtaInstructions","userPublicKey","getUserIntermediateTokenAccountAddress","userIntermediateTokenAccountAddress","getUserDestinationTokenAccountAddress","userIntermediaryTokenAccountResult","userDestinationTokenAccountResult","Promise","all","getOrCreateOpenOrdersAddress","marketToOpenOrdersAddress","marketAddress","openOrdersAccountInfo","newOpenOrdersAddress","newOpenOrdersAddressInfo","calculateTransactionDepositAndFee","intermediate","feeCalculator","SERUM_OPEN_ACCOUNT_LAMPORTS","OPEN_TOKEN_ACCOUNT_LAMPORTS","openOrdersDeposits","ooi","ataDepositLength","ataDeposit","signatureFee","some","oo","flat","lamportsPerSignature","getDepositAndFeeFromInstructions","serumOpenOrdersPromise","routeCache","openOrdersInstructionsPromise","promise","then","openOrdersInstructions","NO_PLATFORM_FEE","feeAccounts","getPlatformFeeAccounts","feeAccountOwner","getTokenAccountsByOwner","deserializedtokenAccount","account","TransactionBuilder","feePayer","addInstruction","build","recentBlockHash","getRecentBlockhash","blockhash","txFields","recentBlockhash","curr","transaction","Transaction","execute","sendTransaction","Owner","_owner","isPublicKey","secretKey","TransactionError","m","txid","Object","setPrototypeOf","prototype","diffTokenBalance","accountKeyIndex","meta","postBalance","postTokenBalances","find","postTokenBalance","accountIndex","uiTokenAmount","preBalance","preTokenBalances","preTokenBalance","abs","parseInt","extractTokenBalanceChangeFromTransaction","transactionResult","message","accountKeys","extractWrappedSOLChangeFromTransaction","extractSOLChangeFromTransaction","getTokenBalanceChangesFromTransactionResponse","sourceAddress","destinationAddress","transactionResponse","sourceTokenBalanceChange","destinationTokenBalanceChange","getConfirmTransaction","promiseRetry","retry","txResult","getTransaction","commitment","error","retries","minTimeout","chunks","apply","_","chunkedGetMultipleAccountInfos","pks","chunkSize","chunk","PLATFORM_FEE_DENOMINATOR","fetchRoutes","extraAccountInfosMap","routeBatchFetcher","computeRouteInfos","platformFeeBps","slippage","getDepositAndFeeForRoute","routesInfo","route","intermediateAmount","splice","quote","pct","outAmountAfterFees","max","lpFee","e","getDepositAndFee","priceFactor","externalAccountInfosMap","hasExternalAccountInfosMap","accountInfosMap","accountsToFetchSet","accountsToFetch","Jupiter","platformFeeAndAccounts","routeCacheDuration","wrapUnwrapSOL","lastMarketInfoIndex","ataInstructions","sourceInstruction","preparedInstructions","splitSetupRequired","setupTransactionBuilder","transactionBuilder","cleanupTransactionBuilder","setupTransaction","cleanupTransaction","setupTransactionObject","swapTransactionObject","cleanupTransactionObject","first","second","third","transactions","swapTransaction","wallet","confirmationWaiterFactory","totalTxs","sign","signAllTransactions","signTransaction","setupError","setupTxid","sendRawTransaction","serialize","skipPreflight","inputAddress","outputAddress","outputAmount","cleanupTxId","transactionError","hasOpenOrders","load","defaultQuoteMintToReferrer","fetchTokenRouteSegments","getRecentBlockhashAndContext","jupiter","setUserPublicKey","getPublicKeysToUpdate","publicKeys","tokenRouteSegment","values","shouldFetchRoutes","getDepositAndFees","now","Date","getTime","inputMintAndOutputMint","localeCompare","fetchTimestamp","routesInfos","cached","key","delete","findSerumOpenOrdersForOwner","getRouteMap","newMarketToOpenOrdersAddress","allOpenOrders","findForOwner"],"mappings":"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"}