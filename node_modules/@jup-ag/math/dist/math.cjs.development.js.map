{"version":3,"file":"math.cjs.development.js","sources":["../src/utils.ts","../src/math/curve.ts","../src/amm/stable.ts","../src/amm/tokenswap-stable.ts","../src/amm/tokenswap-constant-product.ts","../src/fraction.ts"],"sourcesContent":["import JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\n\nexport type SwapResult = {\n  priceImpact: Decimal;\n  fees: JSBI;\n  expectedOutputAmount: JSBI;\n  minOutputAmount: JSBI;\n};\n\nexport const ZERO = JSBI.BigInt(0);\nexport const ONE = JSBI.BigInt(1);\nexport const TWO = JSBI.BigInt(2);\n\nexport function abs(number: JSBI) {\n  if (JSBI.GE(number, ZERO)) {\n    return number;\n  }\n\n  return JSBI.unaryMinus(number);\n}\n\nexport function sumArray(numbers: JSBI[]) {\n  return numbers.reduce((prev, curr) => {\n    return JSBI.add(prev, curr);\n  }, ZERO);\n}\n\nexport function mulArray(numbers: JSBI[]) {\n  return numbers.reduce((prev, curr) => {\n    return JSBI.multiply(prev, curr);\n  }, ONE);\n}\n\nexport function ceilingDivision(dividend: JSBI, divisor: JSBI): [JSBI, JSBI] {\n  let quotient = JSBI.divide(dividend, divisor);\n  if (JSBI.equal(quotient, ZERO)) {\n    return [ZERO, divisor];\n  }\n\n  let remainder = JSBI.remainder(dividend, divisor);\n  if (JSBI.greaterThan(remainder, ZERO)) {\n    quotient = JSBI.add(quotient, ONE);\n    divisor = JSBI.divide(dividend, quotient);\n    remainder = JSBI.remainder(dividend, quotient);\n    if (JSBI.greaterThan(remainder, ZERO)) {\n      divisor = JSBI.add(divisor, ONE);\n    }\n  }\n\n  return [quotient, divisor];\n}\n\nexport function toDecimal(input: JSBI, shift = 0) {\n  return new Decimal(input.toString()).div(new Decimal(10).pow(shift));\n}\n","import JSBI from 'jsbi';\nimport { abs, mulArray, ONE, sumArray, TWO, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\n\nexport class Curve {\n  private numberOfCurrencies: JSBI;\n  private amplificationFactor: JSBI;\n  private tokenAmounts: JSBI[];\n  private targetPrices: JSBI[];\n\n  constructor(numberOfCurrencies: JSBI, amplificationFactor: JSBI, tokenAmounts: JSBI[], targetPrices: JSBI[]) {\n    this.numberOfCurrencies = numberOfCurrencies;\n    this.amplificationFactor = amplificationFactor;\n    this.tokenAmounts = tokenAmounts;\n    this.targetPrices = targetPrices;\n  }\n\n  public exchange(inputIndex: number, outputIndex: number, amount: JSBI, minusOne: boolean = true) {\n    let xp = this.xp();\n    let dx = JSBI.multiply(amount, this.targetPrices[inputIndex]);\n    let x = JSBI.add(xp[inputIndex], dx);\n    let y = this.computeY(inputIndex, outputIndex, x);\n    let dy = JSBI.subtract(xp[outputIndex], y);\n\n    // This is a special condition on Curve stable algo. For TokenSwap, they don't seem to apply this minus one.\n    if (minusOne) {\n      dy = JSBI.subtract(dy, ONE);\n    }\n\n    return JSBI.divide(dy, this.targetPrices[outputIndex]);\n  }\n\n  public computeBaseY(inputIndex: number, outputIndex: number, amount: JSBI) {\n    let d = this.computeD();\n    let xp = this.xp();\n    let nn = JSBI.exponentiate(this.numberOfCurrencies, this.numberOfCurrencies);\n    let sum = sumArray(xp);\n    let product = mulArray(xp);\n    let k = JSBI.subtract(\n      JSBI.add(JSBI.multiply(JSBI.multiply(this.amplificationFactor, nn), sum), d),\n      JSBI.multiply(JSBI.multiply(this.amplificationFactor, d), nn),\n    );\n    let b = JSBI.multiply(JSBI.multiply(JSBI.multiply(this.amplificationFactor, nn), nn), product);\n    let c = JSBI.multiply(JSBI.multiply(nn, product), k);\n    let numerator = JSBI.add(b, JSBI.divide(c, xp[inputIndex]));\n    let denominator = JSBI.add(b, JSBI.divide(c, xp[outputIndex]));\n\n    // Convert to number since JSBI doesn't support log10\n    let inputFactor = Math.log10(JSBI.toNumber(this.targetPrices[inputIndex]));\n    let outputFactor = Math.log10(JSBI.toNumber(this.targetPrices[outputIndex]));\n    let factor = Math.abs(outputFactor - inputFactor);\n\n    if (inputFactor >= outputFactor) {\n      return JSBI.BigInt(\n        new Decimal(numerator.toString())\n          .mul(new Decimal(amount.toString()))\n          .div(new Decimal(denominator.toString()))\n          .mul(Math.pow(10, factor))\n          .floor()\n          .toString(),\n      );\n    } else {\n      return JSBI.BigInt(\n        new Decimal(numerator.toString())\n          .mul(new Decimal(amount.toString()))\n          .div(new Decimal(denominator.toString()))\n          .div(Math.pow(10, factor))\n          .floor()\n          .toString(),\n      );\n    }\n  }\n\n  private computeY(inputIndex: number, outputIndex: number, newTotalAmount: JSBI) {\n    let d = this.computeD();\n    let xx = this.xp();\n    xx[inputIndex] = newTotalAmount;\n    xx.splice(outputIndex, 1);\n\n    let ann = JSBI.multiply(this.amplificationFactor, this.numberOfCurrencies);\n    let c = d;\n\n    for (const y of xx) {\n      c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(y, this.numberOfCurrencies));\n    }\n    c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(this.numberOfCurrencies, ann));\n\n    let b = JSBI.subtract(JSBI.add(sumArray(xx), JSBI.divide(d, ann)), d);\n    let yPrev = ZERO;\n    let y = d;\n\n    while (JSBI.greaterThan(abs(JSBI.subtract(y, yPrev)), ONE)) {\n      yPrev = y;\n      y = JSBI.divide(JSBI.add(JSBI.exponentiate(y, TWO), c), JSBI.add(JSBI.multiply(TWO, y), b));\n    }\n\n    return y;\n  }\n\n  private computeD() {\n    let dPrev = ZERO;\n    let xp = this.xp();\n    let sum = sumArray(xp);\n    let d = sum;\n    let ann = JSBI.multiply(this.amplificationFactor, this.numberOfCurrencies);\n\n    while (JSBI.greaterThan(abs(JSBI.subtract(d, dPrev)), ONE)) {\n      let dP = d;\n      for (const x of xp) {\n        dP = JSBI.divide(JSBI.multiply(dP, d), JSBI.multiply(this.numberOfCurrencies, x));\n      }\n      dPrev = d;\n      let numerator = JSBI.multiply(JSBI.add(JSBI.multiply(ann, sum), JSBI.multiply(dP, this.numberOfCurrencies)), d);\n      let denominator = JSBI.add(\n        JSBI.multiply(JSBI.subtract(ann, ONE), d),\n        JSBI.multiply(JSBI.add(this.numberOfCurrencies, ONE), dP),\n      );\n      d = JSBI.divide(numerator, denominator);\n    }\n\n    return d;\n  }\n\n  private xp() {\n    return this.tokenAmounts.map((tokenAmount, index) => {\n      return JSBI.multiply(tokenAmount, this.targetPrices[index]);\n    });\n  }\n}\n","import JSBI from 'jsbi';\nimport { Curve } from '../math/curve';\nimport { SwapResult, toDecimal, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\n\nexport class Stable {\n  private curve: Curve;\n\n  constructor(amp: JSBI, private tokenAmounts: JSBI[], private targetPrices: JSBI[], private traderFee: Fraction) {\n    this.curve = new Curve(JSBI.BigInt(this.tokenAmounts.length), amp, this.tokenAmounts, this.targetPrices);\n  }\n\n  public exchange(\n    inputTradeAmount: JSBI,\n    slippageTolerance: Fraction,\n    inputIndex: number,\n    outputIndex: number,\n  ): SwapResult {\n    let outputAmountWithoutFees = this.getOutputAmount(inputTradeAmount, inputIndex, outputIndex);\n    let fees = this.getFees(outputAmountWithoutFees);\n    let expectedOutputAmount = JSBI.subtract(outputAmountWithoutFees, fees);\n\n    return {\n      priceImpact: this.getPriceImpact(inputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees: fees,\n      expectedOutputAmount: expectedOutputAmount,\n      minOutputAmount: this.getMinimumOutputAmount(expectedOutputAmount, slippageTolerance),\n    };\n  }\n\n  private getPriceImpact(\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(this.tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(this.tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getOutputAmountWithNoSlippage(inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(outputAmountWithoutFees: JSBI): JSBI {\n    return JSBI.equal(this.traderFee.numerator, ZERO)\n      ? ZERO\n      : JSBI.divide(JSBI.multiply(outputAmountWithoutFees, this.traderFee.numerator), this.traderFee.denominator);\n  }\n\n  private getMinimumOutputAmount(expectedOutputAmount: JSBI, slippageTolerance: Fraction): JSBI {\n    return JSBI.divide(\n      JSBI.multiply(expectedOutputAmount, JSBI.subtract(slippageTolerance.denominator, slippageTolerance.numerator)),\n      slippageTolerance.denominator,\n    );\n  }\n\n  private getOutputAmount(inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    return this.curve.exchange(inputIndex, outputIndex, inputTradeAmount);\n  }\n\n  private getOutputAmountWithNoSlippage(inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    return this.curve.computeBaseY(inputIndex, outputIndex, inputTradeAmount);\n  }\n}\n","import JSBI from 'jsbi';\nimport { Curve } from '../math/curve';\nimport { ONE, SwapResult, toDecimal, TWO, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\n\nexport class TokenSwapStable {\n  private curve: Curve;\n\n  constructor(amp: JSBI, private tokenAmounts: JSBI[], private traderFee: Fraction, private ownerFee: Fraction) {\n    this.curve = new Curve(TWO, amp, this.tokenAmounts, [ONE, ONE]);\n  }\n\n  public exchange(inputTradeAmount: JSBI, slippageTolerance: Fraction, outputIndex: number): SwapResult {\n    let inputIndex = outputIndex === 0 ? 1 : 0;\n    let expectedOutputAmount = this.getExpectedOutputAmount(inputTradeAmount, inputIndex, outputIndex);\n\n    return {\n      priceImpact: this.getPriceImpact(inputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees: this.getFees(inputTradeAmount),\n      expectedOutputAmount,\n      minOutputAmount: this.getMinimumOutputAmount(expectedOutputAmount, slippageTolerance),\n    };\n  }\n\n  private getPriceImpact(\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(this.tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(this.tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getExpectedOutputAmountWithNoSlippage(inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(inputTradeAmount: JSBI): JSBI {\n    const tradingFee = JSBI.equal(this.traderFee.numerator, ZERO)\n      ? ZERO\n      : JSBI.divide(JSBI.multiply(inputTradeAmount, this.traderFee.numerator), this.traderFee.denominator);\n\n    const ownerFee = JSBI.equal(this.ownerFee.numerator, ZERO)\n      ? ZERO\n      : JSBI.divide(JSBI.multiply(inputTradeAmount, this.ownerFee.numerator), this.ownerFee.denominator);\n\n    return JSBI.add(tradingFee, ownerFee);\n  }\n\n  private getExpectedOutputAmount(inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    const inputTradeAmountLessFees = this.getInputAmountLessFees(inputTradeAmount);\n\n    return this.getOutputAmount(inputTradeAmountLessFees, inputIndex, outputIndex);\n  }\n\n  private getExpectedOutputAmountWithNoSlippage(inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    const inputTradeAmountLessFees = this.getInputAmountLessFees(inputTradeAmount);\n\n    return this.getOutputAmountWithNoSlippage(inputTradeAmountLessFees, inputIndex, outputIndex);\n  }\n\n  private getMinimumOutputAmount(expectedOutputAmountJSBI: JSBI, slippageTolerance: Fraction): JSBI {\n    return JSBI.divide(\n      JSBI.multiply(\n        expectedOutputAmountJSBI,\n        JSBI.subtract(slippageTolerance.denominator, slippageTolerance.numerator),\n      ),\n      slippageTolerance.denominator,\n    );\n  }\n\n  private getInputAmountLessFees(inputTradeAmount: JSBI): JSBI {\n    return JSBI.subtract(inputTradeAmount, this.getFees(inputTradeAmount));\n  }\n\n  private getOutputAmount(inputTradeAmountLessFees: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    return this.curve.exchange(inputIndex, outputIndex, inputTradeAmountLessFees, false);\n  }\n\n  private getOutputAmountWithNoSlippage(inputTradeAmountLessFees: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    return this.curve.computeBaseY(inputIndex, outputIndex, inputTradeAmountLessFees);\n  }\n}\n","import JSBI from 'jsbi';\nimport { SwapResult, toDecimal, ZERO, ceilingDivision } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\n\nexport class TokenSwapConstantProduct {\n  constructor(\n    private tokenAmounts: JSBI[],\n    private traderFee: Fraction,\n    private ownerFee: Fraction,\n    private feesOnInput: boolean = true,\n  ) {}\n\n  public exchange(inputTradeAmount: JSBI, slippageTolerance: Fraction, outputIndex: number): SwapResult {\n    let inputIndex = outputIndex === 0 ? 1 : 0;\n    const newInputTradeAmount = this.feesOnInput ? this.getAmountLessFees(inputTradeAmount) : inputTradeAmount;\n\n    let expectedOutputAmount = this.getExpectedOutputAmount(newInputTradeAmount, inputIndex, outputIndex);\n\n    let fees = this.getFees(this.feesOnInput ? inputTradeAmount : expectedOutputAmount);\n\n    if (!this.feesOnInput) {\n      expectedOutputAmount = this.getAmountLessFees(expectedOutputAmount);\n    }\n\n    return {\n      priceImpact: this.getPriceImpact(newInputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees,\n      expectedOutputAmount,\n      minOutputAmount: this.getMinimumOutputAmount(expectedOutputAmount, slippageTolerance),\n    };\n  }\n\n  private getPriceImpact(\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(this.tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(this.tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getExpectedOutputAmountWithNoSlippage(inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(inputTradeAmount: JSBI): JSBI {\n    const tradingFee = JSBI.equal(this.traderFee.numerator, ZERO)\n      ? ZERO\n      : JSBI.divide(JSBI.multiply(inputTradeAmount, this.traderFee.numerator), this.traderFee.denominator);\n\n    const ownerFee = JSBI.equal(this.ownerFee.numerator, ZERO)\n      ? ZERO\n      : JSBI.divide(JSBI.multiply(inputTradeAmount, this.ownerFee.numerator), this.ownerFee.denominator);\n\n    return JSBI.add(tradingFee, ownerFee);\n  }\n\n  private getExpectedOutputAmount(inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    return this.getOutputAmount(inputTradeAmount, inputIndex, outputIndex);\n  }\n\n  private getExpectedOutputAmountWithNoSlippage(inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    if (JSBI.equal(this.tokenAmounts[inputIndex], ZERO)) {\n      return this.tokenAmounts[outputIndex];\n    }\n\n    let expectedOutputAmountWithNoSlippage = JSBI.divide(\n      JSBI.multiply(inputTradeAmount, this.tokenAmounts[outputIndex]),\n      this.tokenAmounts[inputIndex],\n    );\n\n    if (this.feesOnInput) {\n      return expectedOutputAmountWithNoSlippage;\n    } else {\n      return this.getAmountLessFees(expectedOutputAmountWithNoSlippage);\n    }\n  }\n\n  private getMinimumOutputAmount(expectedOutputAmountJSBI: JSBI, slippageTolerance: Fraction): JSBI {\n    return JSBI.divide(\n      JSBI.multiply(\n        expectedOutputAmountJSBI,\n        JSBI.subtract(slippageTolerance.denominator, slippageTolerance.numerator),\n      ),\n      slippageTolerance.denominator,\n    );\n  }\n\n  private getAmountLessFees(tradeAmount: JSBI): JSBI {\n    return JSBI.subtract(tradeAmount, this.getFees(tradeAmount));\n  }\n\n  private getOutputAmount(inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    const [poolInputAmount, poolOutputAmount] = [this.tokenAmounts[inputIndex], this.tokenAmounts[outputIndex]];\n\n    const invariant = this.getInvariant();\n\n    const [newPoolOutputAmount] = ceilingDivision(invariant, JSBI.add(poolInputAmount, inputTradeAmount));\n\n    return JSBI.subtract(poolOutputAmount, newPoolOutputAmount);\n  }\n\n  getInvariant() {\n    return JSBI.multiply(this.tokenAmounts[0], this.tokenAmounts[1]);\n  }\n}\n","import JSBI from 'jsbi';\n\nexport class Fraction {\n  constructor(public numerator: JSBI, public denominator: JSBI) {}\n}\n"],"names":["ZERO","JSBI","BigInt","ONE","TWO","abs","number","GE","unaryMinus","sumArray","numbers","reduce","prev","curr","add","mulArray","multiply","ceilingDivision","dividend","divisor","quotient","divide","equal","remainder","greaterThan","toDecimal","input","shift","Decimal","toString","div","pow","Curve","numberOfCurrencies","amplificationFactor","tokenAmounts","targetPrices","exchange","inputIndex","outputIndex","amount","minusOne","xp","dx","x","y","computeY","dy","subtract","computeBaseY","d","computeD","nn","exponentiate","sum","product","k","b","c","numerator","denominator","inputFactor","Math","log10","toNumber","outputFactor","factor","mul","floor","newTotalAmount","xx","splice","ann","yPrev","dPrev","dP","map","tokenAmount","index","Stable","amp","traderFee","curve","length","inputTradeAmount","slippageTolerance","outputAmountWithoutFees","getOutputAmount","fees","getFees","expectedOutputAmount","priceImpact","getPriceImpact","minOutputAmount","getMinimumOutputAmount","inputTradeAmountJSBI","expectedOutputAmountJSBI","noSlippageOutputAmount","getOutputAmountWithNoSlippage","impact","sub","TokenSwapStable","ownerFee","getExpectedOutputAmount","getExpectedOutputAmountWithNoSlippage","tradingFee","inputTradeAmountLessFees","getInputAmountLessFees","TokenSwapConstantProduct","feesOnInput","newInputTradeAmount","getAmountLessFees","expectedOutputAmountWithNoSlippage","tradeAmount","poolInputAmount","poolOutputAmount","invariant","getInvariant","newPoolOutputAmount","Fraction"],"mappings":"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"}