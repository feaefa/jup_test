/// <reference types="node" />
import type { Connection, TransactionInstruction } from "@solana/web3.js";
import { PublicKey } from "@solana/web3.js";
import type { IExchange } from "./entities/exchange";
import type { StableSwapConfig } from "./instructions";
import * as instructions from "./instructions";
import type { StableSwapState } from "./state";
export declare class StableSwap {
    readonly config: StableSwapConfig;
    readonly state: StableSwapState;
    /**
     * Constructor for new StableSwap client object
     * @param connection
     * @param config
     * @param state
     */
    constructor(config: StableSwapConfig, state: StableSwapState);
    /**
     * Get the minimum balance for the token swap account to be rent exempt
     *
     * @return Number of lamports required
     */
    static getMinBalanceRentForExemptStableSwap(connection: Connection): Promise<number>;
    /**
     * Load an onchain StableSwap program.
     *
     * @param connection The connection to use
     * @param swapAccount The public key of the account to load
     * @param programID Address of the onchain StableSwap program
     */
    static load(connection: Connection, swapAccount: PublicKey, programID?: PublicKey): Promise<StableSwap>;
    /**
     * Loads an onchain StableSwap program from an exchange.
     *
     * @param connection
     * @param exchange
     * @returns
     */
    static loadFromExchange(connection: Connection, exchange: IExchange): Promise<StableSwap>;
    /**
     * Loads a StableSwap instance with data.
     *
     * @param programID The program ID.
     * @param swapAccount The address of the swap.
     * @param swapAccountData The data of the swapAccount.
     * @param authority The swap's authority.
     * @returns
     */
    static loadWithData(swapAccount: PublicKey, swapAccountData: Buffer, authority: PublicKey, programID?: PublicKey): StableSwap;
    /**
     * Swap token A for token B
     * @param userSource
     * @param poolSource
     * @param poolDestination
     * @param userDestination
     * @param amountIn
     * @param minimumAmountOut
     */
    swap(args: Pick<instructions.SwapInstruction, "userAuthority" | "userSource" | "userDestination" | "poolSource" | "poolDestination" | "amountIn" | "minimumAmountOut">): TransactionInstruction;
    /**
     * Deposit tokens into the pool.
     */
    deposit(args: Pick<instructions.DepositInstruction, "userAuthority" | "sourceA" | "sourceB" | "poolTokenAccount" | "tokenAmountA" | "tokenAmountB" | "minimumPoolTokenAmount">): TransactionInstruction;
    /**
     * Withdraw tokens from the pool
     */
    withdraw(args: Pick<instructions.WithdrawInstruction, "userAuthority" | "userAccountA" | "userAccountB" | "sourceAccount" | "poolTokenAmount" | "minimumTokenA" | "minimumTokenB">): TransactionInstruction;
    /**
     * Withdraw tokens from the pool
     */
    withdrawOne(args: Pick<instructions.WithdrawOneInstruction, "userAuthority" | "baseTokenAccount" | "destinationAccount" | "sourceAccount" | "poolTokenAmount" | "minimumTokenAmount">): TransactionInstruction;
}
/**
 * Finds the swap authority address that is used to sign transactions on behalf of the swap.
 *
 * @param swapAccount
 * @param swapProgramID
 * @returns
 */
export declare const findSwapAuthorityKey: (swapAccount: PublicKey, swapProgramID?: PublicKey) => Promise<[PublicKey, number]>;
//# sourceMappingURL=stable-swap.d.ts.map