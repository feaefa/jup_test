import { __awaiter } from "tslib";
import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import { PublicKey } from "@solana/web3.js";
import { getATAAddress } from "../ata";
/**
 * Gets an associated token account, returning a create instruction if it doesn't exist.
 * @param param0
 * @returns
 */
export const getOrCreateATA = ({ provider, mint, owner = provider.wallet.publicKey, payer = provider.wallet.publicKey, }) => __awaiter(void 0, void 0, void 0, function* () {
    const address = yield getATAAddress({ mint, owner });
    if (yield provider.getAccountInfo(address)) {
        return { address, instruction: null };
    }
    else {
        return {
            address,
            instruction: createATAInstruction({
                mint,
                address,
                owner,
                payer,
            }),
        };
    }
});
/**
 * Gets ATAs and creates them if they don't exist.
 * @param param0
 * @returns
 */
export const getOrCreateATAs = ({ provider, mints, owner = provider.wallet.publicKey, }) => __awaiter(void 0, void 0, void 0, function* () {
    const result = yield Promise.all(Object.entries(mints).map(([name, mint]) => __awaiter(void 0, void 0, void 0, function* () {
        const mintKey = new PublicKey(mint);
        const result = yield getOrCreateATA({
            provider,
            mint: mintKey,
            owner: owner,
            payer: provider.wallet.publicKey,
        });
        return {
            address: result.address,
            instruction: result.instruction,
            name,
            mintKey,
        };
    })));
    const deduped = result.reduce((acc, { address, name, instruction }) => {
        return {
            accounts: Object.assign(Object.assign({}, acc.accounts), { [name]: address }),
            createAccountInstructions: Object.assign(Object.assign({}, acc.createAccountInstructions), { [name]: instruction }),
            instructions: instruction
                ? Object.assign(Object.assign({}, acc.instructions), { [address.toString()]: instruction }) : acc.instructions,
        };
    }, { accounts: {}, instructions: {}, createAccountInstructions: {} });
    return {
        accounts: deduped.accounts,
        createAccountInstructions: deduped.createAccountInstructions,
        instructions: Object.values(deduped.instructions),
    };
});
/**
 * Instruction for creating an ATA.
 * @returns
 */
export const createATAInstruction = ({ address, mint, owner, payer, }) => Token.createAssociatedTokenAccountInstruction(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, mint, address, owner, payer);
//# sourceMappingURL=ata.js.map