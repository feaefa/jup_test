"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenOwner = void 0;
const tslib_1 = require("tslib");
const _1 = require(".");
/**
 * Wrapper around a token account owner to create token instructions.
 */
class TokenOwner {
    constructor(owner) {
        this.owner = owner;
    }
    /**
     * Gets the user's ATA.
     * @param mint
     * @returns
     */
    getATA(mint) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            return yield (0, _1.getATAAddress)({ mint, owner: this.owner });
        });
    }
    /**
     * Transfers tokens to a token account.
     * @param amount Amount of tokens to transfer.
     * @param to Token account to transfer to.
     * @returns The transaction instruction.
     */
    transfer(amount, to) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            return _1.SPLToken.createTransferInstruction(_1.TOKEN_PROGRAM_ID, yield this.getATA(amount.token.mintAccount), to, this.owner, [], amount.toU64());
        });
    }
    /**
     * Transfers tokens to a token account, checked..
     * @param amount Amount of tokens to transfer.
     * @param to Token account to transfer to.
     * @returns The transaction instruction.
     */
    transferChecked(amount, to) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            return _1.SPLToken.createTransferCheckedInstruction(_1.TOKEN_PROGRAM_ID, yield this.getATA(amount.token.mintAccount), amount.token.mintAccount, to, this.owner, [], amount.toU64(), amount.token.decimals);
        });
    }
    /**
     * Mints tokens to a token account.
     * @param amount Amount of tokens to transfer.
     * @param to Token account to transfer to.
     * @returns The transaction instruction.
     */
    mintTo(amount, to) {
        return _1.SPLToken.createMintToInstruction(_1.TOKEN_PROGRAM_ID, amount.token.mintAccount, to, this.owner, [], amount.toU64());
    }
    /**
     * Creates an associated token account instruction.
     * @param mint Mint of the ATA.
     * @param payer Payer to create the ATA. Defaults to the owner.
     * @returns The transaction instruction.
     */
    createATA(mint, payer = this.owner) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            return _1.SPLToken.createAssociatedTokenAccountInstruction(_1.ASSOCIATED_TOKEN_PROGRAM_ID, _1.TOKEN_PROGRAM_ID, mint, yield this.getATA(mint), this.owner, payer);
        });
    }
}
exports.TokenOwner = TokenOwner;
//# sourceMappingURL=tokenOwner.js.map