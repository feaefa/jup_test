"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getATAAddresses = exports.getATAAddress = void 0;
const tslib_1 = require("tslib");
const solana_contrib_1 = require("@saberhq/solana-contrib");
const spl_token_1 = require("@solana/spl-token");
/**
 * Gets an associated token account address.
 */
const getATAAddress = ({ mint, owner, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
    const [address] = yield solana_contrib_1.PublicKey.findProgramAddress([owner.toBuffer(), spl_token_1.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID);
    return address;
});
exports.getATAAddress = getATAAddress;
/**
 * Gets multiple associated token account addresses.
 */
const getATAAddresses = ({ mints, owner, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
    const result = yield Promise.all(Object.entries(mints).map((args) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
        const [name, mint] = args;
        const result = yield (0, exports.getATAAddress)({
            mint,
            owner: owner,
        });
        return {
            address: result,
            name,
            mint,
        };
    })));
    const deduped = result.reduce((acc, { address, name, mint }) => {
        return {
            accounts: Object.assign(Object.assign({}, acc.accounts), { [name]: { address, mint } }),
        };
    }, { accounts: {} });
    return {
        accounts: deduped.accounts,
    };
});
exports.getATAAddresses = getATAAddresses;
//# sourceMappingURL=ata.js.map