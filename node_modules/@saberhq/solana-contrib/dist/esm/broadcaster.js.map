{"version":3,"file":"broadcaster.js","sourceRoot":"","sources":["../../src/broadcaster.ts"],"names":[],"mappings":";AAYA,OAAO,EACL,wBAAwB,EACxB,kBAAkB,EAClB,yBAAyB,GAC1B,MAAM,GAAG,CAAC;AACX,OAAO,EAAE,iCAAiC,EAAE,MAAM,2CAA2C,CAAC;AAS9F;;GAEG;AACH,MAAM,OAAO,2BAA2B;IACtC,YACW,cAA0B,EAC1B,OAAuB,wBAAwB;QAD/C,mBAAc,GAAd,cAAc,CAAY;QAC1B,SAAI,GAAJ,IAAI,CAA2C;IACvD,CAAC;IAEE,kBAAkB,CACtB,aAAyB,WAAW;;YAEpC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YACxE,OAAO,MAAM,CAAC,SAAS,CAAC;QAC1B,CAAC;KAAA;IAED;;;;;;;OAOG;IACG,SAAS,CACb,EAAe,EACf,KAAkD,IAAI,CAAC,IAAI;YAA3D,EAAE,SAAS,GAAG,IAAI,OAAyC,EAApC,IAAI,cAA3B,aAA6B,CAAF;;YAE3B,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;aACpE;YACD,MAAM,KAAK,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;YAE7B,IAAI,SAAS,EAAE;gBACb,OAAO,IAAI,kBAAkB,CAC3B,IAAI,CAAC,cAAc,EACnB,MAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAC1D,CAAC;aACH;YAED,OAAO,MAAM,yBAAyB,CAAC,GAAS,EAAE;gBAChD,kDAAkD;gBAClD,OAAO,IAAI,kBAAkB,CAC3B,IAAI,CAAC,cAAc,EACnB,MAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAC1D,CAAC;YACJ,CAAC,CAAA,CAAC,CAAC;;KACJ;IAED;;;;;OAKG;IACG,QAAQ,CACZ,EAAe,EACf,EACE,UAAU,GAAG,WAAW,EACxB,aAAa,GAAG,IAAI,MAIlB;QACF,UAAU,EAAE,WAAW;QACvB,aAAa,EAAE,IAAI;KACpB;;YAED,IAAI,aAAa,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC/C,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;aAClE;YACD,OAAO,MAAM,iCAAiC,CAC5C,IAAI,CAAC,cAAc,EACnB,EAAE,EACF,UAAU,CACX,CAAC;QACJ,CAAC;KAAA;CACF;AAED;;GAEG;AACH,MAAM,OAAO,6BAA6B;IACxC,YACW,WAAkC,EAClC,OAAuB,wBAAwB;QAD/C,gBAAW,GAAX,WAAW,CAAuB;QAClC,SAAI,GAAJ,IAAI,CAA2C;IACvD,CAAC;IAEE,kBAAkB,CACtB,UAA4D;;mCAA5D,EAAA,mBAAyB,IAAI,CAAC,IAAI,CAAC,UAAU,mCAAI,WAAW;;YAE5D,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CACpE,CAAC;YACF,OAAO,MAAM,CAAC,SAAS,CAAC;;KACzB;IAEa,mBAAmB,CAC/B,OAAe,EACf,OAAqB;;YAErB,OAAO,MAAM,OAAO,CAAC,GAAG,CACtB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAO,UAAU,EAAE,EAAE;gBACxC,OAAO,IAAI,kBAAkB,CAC3B,UAAU,EACV,MAAM,UAAU,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CACtD,CAAC;YACJ,CAAC,CAAA,CAAC,CACH,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;OAOG;IACG,SAAS,CACb,EAAe,EACf,KAAkD,IAAI,CAAC,IAAI;YAA3D,EAAE,SAAS,GAAG,IAAI,OAAyC,EAApC,IAAI,cAA3B,aAA6B,CAAF;;YAE3B,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;aACpE;YACD,MAAM,KAAK,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;YAE7B,IAAI,SAAS,EAAE;gBACb,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aACpD;YAED,OAAO,MAAM,yBAAyB,CAAC,GAAS,EAAE;gBAChD,kDAAkD;gBAClD,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACrD,CAAC,CAAA,CAAC,CAAC;;KACJ;IAED;;;;;OAKG;IACG,QAAQ,CACZ,EAAe,EACf,EACE,UAAU,GAAG,WAAW,EACxB,aAAa,GAAG,IAAI,MAIlB;QACF,UAAU,EAAE,WAAW;QACvB,aAAa,EAAE,IAAI;KACpB;;YAED,IAAI,aAAa,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC/C,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;aAClE;YACD,OAAO,MAAM,OAAO,CAAC,GAAG,CACtB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAO,UAAU,EAAE,EAAE;gBACxC,OAAO,MAAM,iCAAiC,CAC5C,UAAU,EACV,EAAE,EACF,UAAU,CACX,CAAC;YACJ,CAAC,CAAA,CAAC,CACH,CAAC;QACJ,CAAC;KAAA;CACF","sourcesContent":["import type {\n  Blockhash,\n  Commitment,\n  ConfirmOptions,\n  Connection,\n  RpcResponseAndContext,\n  SendOptions,\n  SimulatedTransactionResponse,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport type { Broadcaster } from \".\";\nimport {\n  DEFAULT_PROVIDER_OPTIONS,\n  PendingTransaction,\n  suppressConsoleErrorAsync,\n} from \".\";\nimport { simulateTransactionWithCommitment } from \"./utils/simulateTransactionWithCommitment\";\n\nexport interface BroadcastOptions extends ConfirmOptions {\n  /**\n   * Prints the transaction logs as emitted by @solana/web3.js. Defaults to true.\n   */\n  printLogs?: boolean;\n}\n\n/**\n * Broadcasts transactions to a single connection.\n */\nexport class SingleConnectionBroadcaster implements Broadcaster {\n  constructor(\n    readonly sendConnection: Connection,\n    readonly opts: ConfirmOptions = DEFAULT_PROVIDER_OPTIONS\n  ) {}\n\n  async getRecentBlockhash(\n    commitment: Commitment = \"processed\"\n  ): Promise<Blockhash> {\n    const result = await this.sendConnection.getRecentBlockhash(commitment);\n    return result.blockhash;\n  }\n\n  /**\n   * Broadcasts a signed transaction.\n   *\n   * @param tx\n   * @param confirm\n   * @param opts\n   * @returns\n   */\n  async broadcast(\n    tx: Transaction,\n    { printLogs = true, ...opts }: BroadcastOptions = this.opts\n  ): Promise<PendingTransaction> {\n    if (tx.signatures.length === 0) {\n      throw new Error(\"Transaction must be signed before broadcasting.\");\n    }\n    const rawTx = tx.serialize();\n\n    if (printLogs) {\n      return new PendingTransaction(\n        this.sendConnection,\n        await this.sendConnection.sendRawTransaction(rawTx, opts)\n      );\n    }\n\n    return await suppressConsoleErrorAsync(async () => {\n      // hide the logs of TX errors if printLogs = false\n      return new PendingTransaction(\n        this.sendConnection,\n        await this.sendConnection.sendRawTransaction(rawTx, opts)\n      );\n    });\n  }\n\n  /**\n   * Simulates a transaction with a commitment.\n   * @param tx\n   * @param commitment\n   * @returns\n   */\n  async simulate(\n    tx: Transaction,\n    {\n      commitment = \"processed\",\n      verifySigners = true,\n    }: {\n      commitment?: Commitment;\n      verifySigners?: boolean;\n    } = {\n      commitment: \"processed\",\n      verifySigners: true,\n    }\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (verifySigners && tx.signatures.length === 0) {\n      throw new Error(\"Transaction must be signed before simulating.\");\n    }\n    return await simulateTransactionWithCommitment(\n      this.sendConnection,\n      tx,\n      commitment\n    );\n  }\n}\n\n/**\n * Broadcasts transactions to multiple connections simultaneously.\n */\nexport class MultipleConnectionBroadcaster implements Broadcaster {\n  constructor(\n    readonly connections: readonly Connection[],\n    readonly opts: ConfirmOptions = DEFAULT_PROVIDER_OPTIONS\n  ) {}\n\n  async getRecentBlockhash(\n    commitment: Commitment = this.opts.commitment ?? \"processed\"\n  ): Promise<Blockhash> {\n    const result = await Promise.any(\n      this.connections.map((conn) => conn.getRecentBlockhash(commitment))\n    );\n    return result.blockhash;\n  }\n\n  private async _sendRawTransaction(\n    encoded: Buffer,\n    options?: SendOptions\n  ): Promise<PendingTransaction> {\n    return await Promise.any(\n      this.connections.map(async (connection) => {\n        return new PendingTransaction(\n          connection,\n          await connection.sendRawTransaction(encoded, options)\n        );\n      })\n    );\n  }\n\n  /**\n   * Broadcasts a signed transaction.\n   *\n   * @param tx\n   * @param confirm\n   * @param opts\n   * @returns\n   */\n  async broadcast(\n    tx: Transaction,\n    { printLogs = true, ...opts }: BroadcastOptions = this.opts\n  ): Promise<PendingTransaction> {\n    if (tx.signatures.length === 0) {\n      throw new Error(\"Transaction must be signed before broadcasting.\");\n    }\n    const rawTx = tx.serialize();\n\n    if (printLogs) {\n      return await this._sendRawTransaction(rawTx, opts);\n    }\n\n    return await suppressConsoleErrorAsync(async () => {\n      // hide the logs of TX errors if printLogs = false\n      return await this._sendRawTransaction(rawTx, opts);\n    });\n  }\n\n  /**\n   * Simulates a transaction with a commitment.\n   * @param tx\n   * @param commitment\n   * @returns\n   */\n  async simulate(\n    tx: Transaction,\n    {\n      commitment = \"processed\",\n      verifySigners = true,\n    }: {\n      commitment?: Commitment;\n      verifySigners?: boolean;\n    } = {\n      commitment: \"processed\",\n      verifySigners: true,\n    }\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (verifySigners && tx.signatures.length === 0) {\n      throw new Error(\"Transaction must be signed before simulating.\");\n    }\n    return await Promise.any(\n      this.connections.map(async (connection) => {\n        return await simulateTransactionWithCommitment(\n          connection,\n          tx,\n          commitment\n        );\n      })\n    );\n  }\n}\n"]}