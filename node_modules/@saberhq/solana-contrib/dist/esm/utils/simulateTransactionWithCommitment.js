import { __awaiter } from "tslib";
import { SendTransactionError } from "@solana/web3.js";
/**
 * Copy of Connection.simulateTransaction that takes a commitment parameter.
 */
export function simulateTransactionWithCommitment(connection, transaction, commitment = "processed") {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const connectionInner = connection;
        const transactionTyped = transaction;
        transaction.recentBlockhash = yield connectionInner._recentBlockhash(connectionInner._disableBlockhashCaching);
        const signData = transaction.serializeMessage();
        const wireTransaction = transactionTyped._serialize(signData);
        const encodedTransaction = wireTransaction.toString("base64");
        const config = { encoding: "base64", commitment };
        const res = yield connectionInner._rpcRequest("simulateTransaction", [
            encodedTransaction,
            config,
        ]);
        if (res.error) {
            throw new SendTransactionError("failed to simulate transaction: " + res.error.message, (_a = res.result.value.logs) !== null && _a !== void 0 ? _a : undefined);
        }
        return res.result;
    });
}
//# sourceMappingURL=simulateTransactionWithCommitment.js.map