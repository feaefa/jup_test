{"version":3,"file":"PendingTransaction.js","sourceRoot":"","sources":["../../../src/transaction/PendingTransaction.ts"],"names":[],"mappings":";;;;AAKA,+EAAyC;AAGzC,gDAAoD;AAgBpD;;GAEG;AACH,MAAa,kBAAkB;IAG7B,YACW,UAAsB,EACtB,SAA+B;QAD/B,eAAU,GAAV,UAAU,CAAY;QACtB,cAAS,GAAT,SAAS,CAAsB;QAJlC,aAAQ,GAA8B,IAAI,CAAC;IAKhD,CAAC;IAEJ;;;;OAIG;IACH,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;OAGG;IACG,IAAI,CAAC,KAIiB,EAAE;YAJnB,EACT,UAAU,GAAG,WAAW,EACxB,YAAY,GAAG,KAAK,OAEQ,EADzB,SAAS,2BAHH,8BAIV,CADa;;YAEZ,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;aACtB;YACD,IAAI,YAAY,EAAE;gBAChB,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;gBAClD,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;aAClD;YACD,OAAO,MAAM,IAAI,CAAC,cAAc,iBAAG,UAAU,IAAK,SAAS,EAAG,CAAC;;KAChE;IAED;;;OAGG;IACG,cAAc,CAAC,KAMjB,EAAE;YANe,EACnB,UAAU,GAAG,WAAW,OAKpB,EAJD,SAAS,2BAFO,cAGpB,CADa;;YAKZ,MAAM,OAAO,GAAG,MAAM,IAAA,uBAAY,EAChC,CAAO,KAAK,EAAE,EAAE;gBACd,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE;oBAClE,UAAU;iBACX,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,EAAE;oBACX,KAAK,CAAC,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;oBAC/C,OAAO;iBACR;gBACD,OAAO,IAAI,gCAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACxD,CAAC,CAAA,kBAEC,OAAO,EAAE,CAAC,EACV,UAAU,EAAE,GAAG,IACZ,SAAS,EAEf,CAAC;YACF,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;aACvD;YACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,OAAO,OAAO,CAAC;;KAChB;IAED;;;OAGG;IACG,0BAA0B,CAC9B,aAAuB,WAAW;;YAElC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,CACxD,IAAI,CAAC,SAAS,EACd,UAAU,CACX,CAAC;YACF,IAAI,KAAK,CAAC,GAAG,EAAE;gBACb,MAAM,KAAK,CAAC,GAAG,CAAC;aACjB;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;KAAA;CACF;AAvFD,gDAuFC","sourcesContent":["import type {\n  Connection,\n  Finality,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport promiseRetry from \"promise-retry\";\nimport type { OperationOptions } from \"retry\";\n\nimport { TransactionReceipt } from \"../transaction\";\n\n/**\n * Options for awaiting a transaction confirmation.\n */\nexport interface TransactionWaitOptions extends OperationOptions {\n  /**\n   * Commitment of the transaction. Defaults to `confirmed`.\n   */\n  readonly commitment?: Finality;\n  /**\n   * Whether or not to use websockets for awaiting confirmation. Defaults to `false`.\n   */\n  readonly useWebsocket?: boolean;\n}\n\n/**\n * Transaction which may or may not be confirmed.\n */\nexport class PendingTransaction {\n  private _receipt: TransactionReceipt | null = null;\n\n  constructor(\n    readonly connection: Connection,\n    readonly signature: TransactionSignature\n  ) {}\n\n  /**\n   * Gets the transaction receipt, if it has already been fetched.\n   *\n   * You probably want the async version of this function, `wait`.\n   */\n  get receipt(): TransactionReceipt | null {\n    return this._receipt;\n  }\n\n  /**\n   * Waits for the confirmation of the transaction, via polling.\n   * @returns\n   */\n  async wait({\n    commitment = \"confirmed\",\n    useWebsocket = false,\n    ...retryOpts\n  }: TransactionWaitOptions = {}): Promise<TransactionReceipt> {\n    if (this._receipt) {\n      return this._receipt;\n    }\n    if (useWebsocket) {\n      await this.awaitSignatureConfirmation(commitment);\n      return await this.pollForReceipt({ commitment });\n    }\n    return await this.pollForReceipt({ commitment, ...retryOpts });\n  }\n\n  /**\n   * Fetches the TransactionReceipt via polling.\n   * @returns\n   */\n  async pollForReceipt({\n    commitment = \"confirmed\",\n    ...retryOpts\n  }: Omit<\n    TransactionWaitOptions,\n    \"useWebsocket\"\n  > = {}): Promise<TransactionReceipt> {\n    const receipt = await promiseRetry(\n      async (retry) => {\n        const result = await this.connection.getTransaction(this.signature, {\n          commitment,\n        });\n        if (!result) {\n          retry(new Error(\"Error fetching transaction\"));\n          return;\n        }\n        return new TransactionReceipt(this.signature, result);\n      },\n      {\n        retries: 5,\n        minTimeout: 500,\n        ...retryOpts,\n      }\n    );\n    if (!receipt) {\n      throw new Error(\"transaction could not be confirmed\");\n    }\n    this._receipt = receipt;\n    return receipt;\n  }\n\n  /**\n   * Awaits the confirmation of the transaction, via onSignature subscription.\n   * @returns\n   */\n  async awaitSignatureConfirmation(\n    commitment: Finality = \"confirmed\"\n  ): Promise<TransactionSignature> {\n    const { value } = await this.connection.confirmTransaction(\n      this.signature,\n      commitment\n    );\n    if (value.err) {\n      throw value.err;\n    }\n    return this.signature;\n  }\n}\n"]}